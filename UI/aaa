local rnd = tostring(math.random(1,100000))

local concac = game:HttpGet("https://raw.githubusercontent.com/7bgqRy0CC2wCjblo9W4kmWBejs72uKCNqI7XqUL/SeaUILib/main/UI/Logo")
local Library=loadstring(syn.crypt.decrypt(concac,"cac"))()
local FieldFarmPos = {
    SunflowerField = {
        Listpos = {},
        Range = {}
    }
}
local Cache = {}
local plr = game.Players.LocalPlayer
local Settings = {mothaiba=true}
local noclip = false

function formatNumber(v)
    return tostring(v):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end
function vToK(tabl)
    local out = {}
    for k, v in pairs(tabl) do
        out[v] = k
    end
    return out
end
function RemoveVal(tb,val) 
    for k,v in pairs(tb) do 
        if v==val then 
            table.remove(tb,k)
            break;
        end    
    end
end
function DienTichTamGiac(x,y,z)
    x=Vector3.new(x.X,0,x.Z)
    y=Vector3.new(y.X,0,y.Z)
    z=Vector3.new(z.X,0,z.Z)
    
    local a = (x-y).magnitude
    local b = (y-z).magnitude
    local c = (x-z).magnitude
    local cv = a+b+c
    local p = cv/2
    local S =(p*(p-a)*(p-b)*(p-c))
    return S
end

function ToTrueFalse(tabl, f)
    local out = {}
    for k, v in pairs(tabl) do
        if f then
            out[k] = f
        else
            out[k] = false
        end
    end

    return out
end
function ToST(tabl, s)
    local out = {}
    for k, v in pairs(tabl) do
       out[k]=s
    end

    return out
end


local u1 = require(game.ReplicatedStorage.ClientStatCache);
repeat wait() until game:IsLoaded()
repeat wait() until plr
repeat wait() until plr.Character
repeat wait() until plr.Character:FindFirstChild("HumanoidRootPart")
repeat wait() until plr.PlayerGui:FindFirstChild("ScreenGui")
repeat wait() until plr.PlayerGui:FindFirstChild("ScreenGui"):FindFirstChild("Menus")
repeat wait() until plr.PlayerGui:FindFirstChild("ScreenGui"):FindFirstChild("LoadingMessage")
repeat wait() until plr.PlayerGui:FindFirstChild("ScreenGui"):FindFirstChild("LoadingMessage").Visible==false
local ListTileGrid = {}

function DisableGlider() 
    local uis = game:GetService("UserInputService")
    for k,v in pairs(getconnections(uis.JumpRequest)) do 
        v:Disable()    
    end
end
function EnableGlider() 
    local uis = game:GetService("UserInputService")
    for k,v in pairs(getconnections(uis.JumpRequest)) do 
        v:Enable()    
    end
end
for k,v in pairs(plr.PlayerGui.ScreenGui:GetChildren()) do 
    if v.Name=="TileGrid" then 
        table.insert(ListTileGrid,v)
    end
end
local SaveFileName = plr.Name.."_BSS.json"

function SaveSettings()
    local HttpService = game:GetService("HttpService")
    if not isfolder("Sea Hub") then
        makefolder("Sea Hub")
    end
    writefile("Sea Hub/" .. SaveFileName, HttpService:JSONEncode(Settings))
end

function ReadSetting() 
    local s,e = pcall(function() 
        local HttpService = game:GetService("HttpService")
        if not isfolder("Sea Hub") then
            makefolder("Sea Hub")
        end
        return HttpService:JSONDecode(readfile("Sea Hub/" .. SaveFileName))
    end)
    if s then return e 
    else
        SaveSettings()
        return ReadSetting()
    end
end
Settings = ReadSetting()
game.ReplicatedStorage.Events.ClaimHive:FireServer(6)
game.ReplicatedStorage.Events.ClaimHive:FireServer(5)
game.ReplicatedStorage.Events.ClaimHive:FireServer(4)
game.ReplicatedStorage.Events.ClaimHive:FireServer(3)
game.ReplicatedStorage.Events.ClaimHive:FireServer(2)
game.ReplicatedStorage.Events.ClaimHive:FireServer(1)

wait(1)
for k,v in pairs(game:GetService("Workspace").Gates:GetChildren()) do 
	for k,v in pairs(v:GetChildren()) do 
		pcall(function() 
			v.CanCollide=false
		end)
	end
end
local LevelFarm = {"CurrentField","QuestPollen","QuestField","FieldBoost","QuestMob","Guiding","Sprout","Mob","Pushroom","StickBug"}
local ListAllToken = {}

local StopFarm = {"Farm","Snail","Kill","Stocking","Snowflake","Rare","Leaf","Donate","Planter","Stick","Ant","StopMoreOne"}

local listjelly = {"Crimson","Cobalt","Festive","Gummy","Photon","Puppy","Tabby","Vicious","Windy"}
for k,v in pairs(listjelly) do 
    listjelly[k]=listjelly[k].."BeeJelly"    
end
table.insert(listjelly,"RoyalJelly")
function Tele(cf) 
    if plr.Character:FindFirstChild("HumanoidRootPart") then 
        plr.Character.HumanoidRootPart.CFrame=cf
    end
end

function GetHumanoidRootPart() 
    if plr.Character then 
        return plr.Character:FindFirstChild("HumanoidRootPart")
    end
end

function GetHop() 
    local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, plr)
                end)
                wait(4)
            end
        end
    end
end
function GetMemoListName()
    local tab = {}
    for k, v in pairs(game.Workspace.Toys:GetChildren()) do
        if string.match(v.Name, "Memory Match") then
            table.insert(tab, v.Name)
        end
    end
    return tab
end
local function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end
return Teleport
end
local Hop = GetHop()

local SpawnTable = {}

pcall(function() 
    game:GetService("Workspace").Decorations["30BeeZone"].Pit.TouchInterest:Destroy()
end)
local TvkStatCache = game:GetService("ReplicatedStorage").Events.RetrievePlayerStats:InvokeServer()
spawn(function() 
    while wait(1) do 
        TvkStatCache =game:GetService("ReplicatedStorage").Events.RetrievePlayerStats:InvokeServer()
        getfenv().TvkStatCache = TvkStatCache
    end
end)
getfenv().TvkStatCache = TvkStatCache
local AutoFAnt2 = false
local ValidAnt2 = true
local ValidLeaf = true

local NearTP=false
local NearTPMag=4
local ValidDodg = true
local ValidAnt=true
local Exploit = "Synapse X"
if http_request and secure_load then
    Exploit = "Sentinel"
    if syn then
        setreadonly(syn, false)
        syn.request = http_request
    else
        syn = {}
        syn.request = http_request
    end
end
function fspawn(f) 
    return coroutine.wrap(f)()
end
function mysplit(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t = {}
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
        table.insert(t, str)
    end
    return t
end
local FieldXYJSON = [[{"Mountain Top Field":{"Y":27,"X":23},"Bamboo Field":{"Y":17,"X":38},"Dandelion Field":{"Y":17,"X":35},"Pumpkin Patch":{"Y":16,"X":32},"Sunflower Field":{"Y":32,"X":19},"Mushroom Field":{"Y":22,"X":31},"Blue Flower Field":{"Y":16,"X":42},"Pine Tree Forest":{"Y":30,"X":22},"Strawberry Field":{"Y":25,"X":21},"Coconut Field":{"Y":20,"X":29},"Stump Field":{"Y":0,"X":0},"Spider Field":{"Y":25,"X":27},"Rose Field":{"Y":19,"X":30},"Ant Field":{"Y":12,"X":31},"Clover Field":{"Y":28,"X":25},"Pineapple Patch":{"Y":22,"X":32},"Cactus Field":{"Y":17,"X":32},"Pepper Patch":{"Y":26,"X":20}}]]
local FieldXY = game:GetService("HttpService"):JSONDecode(FieldXYJSON)

-- local FieldPart = {}
-- for k,v in pairs(game.Workspace.Flowers:GetChildren()) do 
--     for k,v2 in pairs(game.Workspace.FlowerZones:GetChildren()) do 
--         local id = v2.ID.Value
--         if mysplit(v.Name,"-")[1] == "FP"..id then 
--             if not FieldPart[v2.Name] then 
--                 FieldPart[v2.Name] = {}
--             end
--             table.insert(FieldPart[v2.Name],v)
--         end
--     end    
-- end


local AutoSave = writefile~=nil
local Con = {}
local old = spawn
local Selling = false
function GetListField(a)
    local tablee = {}
    for _, v in pairs(game.Workspace.FlowerZones:GetChildren()) do
        table.insert(tablee, v.Name)
    end
    if a then 
        table.insert(tablee,a)
    end
    return tablee
end
function ListToOb(tabl, tf)
    local out = {}
    for k, v in pairs(tabl) do
        if tf then
            out[v] = true
        else
            out[v] = false
        end
    end
    return out
end

local StopFarmVK = vToK(StopFarm)
local StopFarmList = ToST(StopFarmVK,false)
local QuestList = {
    "Polar Bear",
    "Brown Bear",
    "Black Bear",
    "Science Bear",
    "Bucko Bee",
    "Riley Bee",
    "Panda Bear",
    "Spirit Bear",
    "Onett"
}
local QuestTF = ListToOb(QuestList, true)

if not Settings.QuestTF then Settings.QuestTF = QuestTF else  for k,v in pairs(Settings.QuestTF) do 
    QuestTF[k]=v
end
Settings.QuestTF=QuestTF
end

local ColorL = {
    "Red","Blue","White"
}
local ColorLTF = ListToOb(ColorL, true)
if not Settings.ColorLTF then Settings.ColorLTF = ColorLTF else  for k,v in pairs(Settings.ColorLTF) do 
    ColorLTF[k]=v
end
Settings.ColorLTF=ColorLTF
end


local PuffRaity = {
    "Mythic","Legendary","Epic","Rare","Normal"
}
local PuffRaityTF = ListToOb(PuffRaity, true)

if not Settings.PuffRaityTF then Settings.PuffRaityTF = PuffRaityTF else  for k,v in pairs(Settings.PuffRaityTF) do 
    PuffRaityTF[k]=v
end
Settings.PuffRaityTF=PuffRaityTF
end


local TPuffRaityTF = ListToOb(PuffRaity, false)
if not Settings.TPuffRaityTF then Settings.TPuffRaityTF = TPuffRaityTF else  for k,v in pairs(Settings.TPuffRaityTF) do 
    TPuffRaityTF[k]=v
end
Settings.TPuffRaityTF=TPuffRaityTF
end

local PFieldTF = ListToOb(GetListField(), true)
if not Settings.PFieldTF then Settings.PFieldTF = PFieldTF else  for k,v in pairs(Settings.PFieldTF) do 
    PFieldTF[k]=v
end
Settings.PFieldTF=PFieldTF
end



local MemoList = GetMemoListName()
local MemoTF = ListToOb(MemoList,false)

if not Settings.MemoTF then 
    Settings.MemoTF=MemoTF
else
    MemoTF=Settings.MemoTF
end


local DonateItem = "Ticket"
local AntMethod = ""
local DonateItem = "Ticket"


function CheckFarm(name) 
    local index = StopFarmVK[name]
    if index then 
        for i=index+1,#StopFarm do 
            if StopFarmList[StopFarm[i]] then 
                return false
            end
        end
        return true
    end
    return false
end

local TokenId = {
    ["Ticket"] = "rbxassetid://1674871631",
    ["Glue"] = "rbxassetid://2504978518",
    ["Pineapple"] = "rbxassetid://1952796032",
    ["Strawberry"] = "rbxassetid://1952740625",
    ["Blueberry"] = "rbxassetid://2028453802",
    ["SunflowerSeed"] = "rbxassetid://1952682401",
    ["Treat"] = "rbxassetid://2028574353",
    ["Gumdrop"] = "rbxassetid://1838129169",
    ["Red Extract"] = "2495935291",
    ["Blue Extract"] = "rbxassetid://2495936060",
    ["Oil"] = "2545746569",
    ["Glitter"] = "rbxassetid://2542899798",
    ["Enzymes"] = "rbxassetid://2584584968",
    ["TropicalDrink"] = "3835877932",
    ["Diamond Egg"] = "rbxassetid://1471850677",
    ["Gold Egg"] = "rbxassetid://1471849394",
    ["Mythic Egg"] = "4520739302",
    ["Star Treat"] = "rbxassetid://2028603146",
    ["Royal Jelly"] = "rbxassetid://1471882621",
    ["Star Jelly"] = "rbxassetid://2319943273",
    ["Moon Charm"] = "rbxassetid://2306224708"
}
local PrioritizeList = {
    ["Token Link"] = "1629547638",
    ["Inspire"] = "2000457501",
    ["Bear Morph"] = "177997841",
    ["Polen Bomb"] = "1442725244",
    ["Fuzz Bomb"] = "4889322534",
    ["Polen Haze"] = "4889470194",
    ["Triangulate"] = "4519523935",
    ["Inferno"] = "4519549299",
    ["Summon Frog"] = "4528414666",
    ["Tornado"] = "3582519526"
}
local ItemDonateList = {
    "Ticket",
    "Gumdrops",
    "Coconut",
    "Stinger",
    "Micro-Converter",
    "FieldDice",
    "JellyBeans",
    "RedExtract",
    "BlueExtract",
    "Glitter",
    "Glue",
    "Oil",
    "Enzymes",
    "TropicalDrink",
    "MagicBean",
    "CloudVial",
    "Box-O-Frogs",
    "AntPass",
    "Treat",
    "SunflowerSeed",
    "Strawberry",
    "Pineapple",
    "Blueberry",
    "Bitterberry",
    "Neonberry",
    "Moon Charm",
    "BasicEgg",
    "SilverEgg",
    "DiamondEgg",
    "RoyalJelly"
}
for k, v in pairs(TokenId) do
    PrioritizeList[k] = v
end
function CheckToyCD(toy) 
    local cd = game.Workspace.Toys[toy].Cooldown.Value
    if not TvkStatCache.ToyTimes[toy] then return true end
    return os.time()-TvkStatCache.ToyTimes[toy] > cd
end

local PrioritizeListTF = ToTrueFalse(PrioritizeList)
PrioritizeListTF["Token Link"] = true
if not Settings.PrioritizeListTF then Settings.PrioritizeListTF = PrioritizeListTF else PrioritizeListTF = Settings.PrioritizeListTF end

local NoSell = false

local AutoGum = false
local AutoCoco = false
local TypeFarming = "Walk"
local AutoDig = false

local StopMoreOne = false
local Valid = true
local InsValid = 26110

local AutoRare = false
local TokenIdByK = vToK(TokenId)
local TokenTrueFakse = ToTrueFalse(TokenId)
local TokenTrueFakse2 = ToTrueFalse(TokenId)
local PlantMagic = false
local HoneyPolen = {
    ["Honey"] = true,
    ["Pollen"] = true
}
local BarId = {
    ["Glue"] = "rbxassetid://2504978518",
    ["Oil"] = "rbxassetid://2545746569",
    ["Enzymes"] = "rbxassetid://2584584968",
    ["Tropical Drink"] = "3835877932",
    ["Blue Extract"] = "rbxassetid://2495936060",
    ["Red Extract"] = "rbxassetid://2495935291",
    ["Stinger"] = "2314214749",
    ["Gumdrop"] = "rbxassetid://1838129169"
}
local FieldIconID = {
    ["Sunflower Field"] = "rbxassetid://2908769405",
    ["Dandelion Field"] = "rbxassetid://2908769047",
    ["Strawberry Field"] = "rbxassetid://2908769330",
    ["Blue Flower Field"] = "rbxassetid://2908768899",
    ["Clover Field"] = "rbxassetid://2908768973",
    ["Mushroom Field"] = "rbxassetid://2908769124",
    ["Spider Field"] = "rbxassetid://2908769301",
    ["Bamboo Field"] = "rbxassetid://2908768829",
    ["Pineapple Patch"] = "rbxassetid://2908769153",
    ["Stump Field"] = "rbxassetid://2908769372",
    ["Cactus Field"] = "rbxassetid://2908768937",
    ["Pumpkin Patch"] = "rbxassetid://2908769220",
    ["Pine Tree Forest"] = "rbxassetid://2908769190",
    ["Rose Field"] = "rbxassetid://2908818982",
    ["Coconut Field"] = "rbxassetid://2908769010",
    ["Mountain Top Field"] = "rbxassetid://2908769086",
    ["Ant Field"] = "rbxassetid://2908768728",
    ["Pepper Patch"] = "3835712489"
}
local Sprinklers = {
    ["The Supreme Saturator"] = 1,
    ["Basic Sprinkler"] = 1,
    ["Silver Soakers"] = 2,
    ["Golden Gushers"] = 3,
    ["Diamond Drenchers"] = 4
}
local TimerMob = {
    ["Rhino Beetle"] = {"Rhino Bush", "Rhino Cave 1", "Rhino Cave 2", "Rhino Cave 3", "PineappleBeetle"},
    ["Spider"] = {"Spider Cave"},
    ["Werewolf"] = {"WerewolfCave"},
    ["Scorpion"] = {"RoseBush", "RoseBush2"},
    ["Mantis"] = {"ForestMantis1", "ForestMantis2", "PineappleMantis1"},
    ["Ladybug"] = {"MushroomBush", "Ladybug Bush", "Ladybug Bush 2", "Ladybug Bush 3"}
}
local TimerKiet = ToTrueFalse(TimerMob, true)

if not Settings.TimerKiet then 
    Settings.TimerKiet=TimerKiet
else
    TimerKiet=Settings.TimerKiet
end
local fieldlistpolar = {
    "Spider Field",
    "Mushroom Field",
    "Rose Field",
    "Strawberry Field",
    "Bamboo Field",
    "Pumpkin Patch",
    "Sunflower Field",
    "Cactus Field",
    "Blue Flower Field",
    "Clover Field",
    "Pineapple Patch",
    "Dandelion Field",
    "Pine Tree Forest"
}
local moblistpolar = {
    "Spider",
    "Scorpion",
    "Werewol",
    "Mantises",
    "Ladybug",
    "Rhino Beetles"
}
local MaskField = {
    ["White"] = {
        "Sunflower Field",
        "Dandelion Field",
        "Spider Field",
        "Pineapple Patch",
        "Pumpkin Patch",
        "Coconut Field"
    },
    ["Blue"] = {
        "Blue Flower Field",
        "Bamboo Field",
        "Pine Tree Forest",
        "Stump Field"
    },
    ["Red"] = {
        "Mushroom Field",
        "Clover Field",
        "Strawberry Field",
        "Cactus Field",
        "Rose Field",
        "Pepper Patch",
        "Mountain Top Field",
        "Ant Field"
    }
}
local ShopList = {
}
for _,v in pairs(game.Workspace.Shops:GetChildren()) do 
    table.insert(ShopList,v.Name)
end
for _, v in pairs(game.Workspace.Collectibles:GetChildren()) do
    local Black = Instance.new("IntValue")
    Black.Parent = v
    Black.Name = "Blacklisted"
end
local AutoSprout = false
local times = 0.2
local Running = true
local Invisible = false
local Particles = game.Workspace.Particles
local Folder2 = Particles.Folder2
local vu = game:GetService("VirtualUser")
local x = 0
local y = 0
local QuestF = plr.PlayerGui.ScreenGui.Menus.Children.Quests.Content
local MaskF = {
    ["White"] = "Gummy Mask",
    ["Red"] = "Demon Mask",
    ["Blue"] = "Diamond Mask"
}
plr.Idled:connect(
    function()
        vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end
)
for i, v in pairs(workspace.FieldDecos:GetChildren()) do
    v:Destroy()
end
function GetFieldByName(name)
    return game.Workspace.FlowerZones:FindFirstChild(name)
end
function GetFieldId(name)
    return GetFieldByName(name).ID.Value
end


local maxx = 31
local maxy = 12

function GetFlower(field, x, y)
    local part = game.Workspace.Flowers:FindFirstChild(tostring(field) .. "-" .. tostring(x) .. "-" .. tostring(y))
    return part
end
function GetXY(part)
    local name = mysplit(part.name, "-")
    return unpack(name)
end
function Conv2LayerTable(tab)
    local tabl = {}
    for k, v in pairs(tab) do
        for f, s in pairs(v) do
            tabl[s] = k
        end
    end
    return tabl
end
local MaskField2 = Conv2LayerTable(MaskField)
local ValidTB={}
function ValidFarm()
    return CheckFarm("Farm")
end
for _, v in pairs(game.Workspace.Decorations.Misc:GetChildren()) do
    if string.match(v.Name, "Mushroom") or string.match(v.Name, "Blue Flower") then
        if v:IsA("Model") and #v:GetChildren() ~= 6 then
            for _, v in pairs(v:GetChildren()) do
                if v:IsA("Part") then
                    v.Transparency = 0.5
                    v.CanCollide = false
                end
            end
        end
    end
end
function CountSprink(name,pos) 
    local cc = 0
    for k,v in ipairs(game:GetService("Workspace").Gadgets:GetChildren()) do 
        if v.Name==name and v:FindFirstChild("Base") then 
            if (v.Base.Position-pos).magnitude<30 then 
                cc=cc+1
            end
        end
    end
    return cc
end
function CountTab(tab)
    local c = 0
    for k, v in pairs(tab) do
        c = c + 1
    end
    return c
end
function GetCurrentFieldBoost()
    local tab = {}
    for k,v in pairs(ListTileGrid) do 
        local GUI = v
        for _, v in pairs(GUI:GetChildren()) do
            if v.Name == "IconTile" and v:FindFirstChild("BG") then
                for f, s in pairs(FieldIconID) do
                    if
                        v.BG:FindFirstChild("Icon") and v.BG:FindFirstChild("Text") and v.BG:FindFirstChild("Bar") and
                            v.BG.Icon.Image == s and
                            v.BG.Bar.BackgroundColor3 == Color3.fromRGB(255, 228, 81)
                     then
                        tab[f] = v.BG.Text.Text
                    end
                end
            end
        end
    end
    
    return tab
end
function IsAnyBoost()
    local t = GetCurrentFieldBoost()
    for k, v in pairs(t) do
        return true
    end
    return false
end
function IsBoostEnd(Field)
    for k,v in pairs(ListTileGrid) do 
        local GUI = v
    for _, v in pairs(GUI:GetChildren()) do
        if v.Name == "IconTile" and v:FindFirstChild("BG") then
            for f, s in pairs(FieldIconID) do
                if
                    v.BG:FindFirstChild("Icon") and v.BG:FindFirstChild("Text") and v.BG:FindFirstChild("Bar") and
                        v.BG.Icon.Image == s and
                        v.BG.Bar.BackgroundColor3 == Color3.fromRGB(255, 228, 81)
                 then
                    if f == Field then
                        return false
                    end
                end
            end
        end
    end
    end
    
    return true
end

-- Get Mob Function

local AttackTokens = {
    "rbxassetid://1629547638",
    "rbxassetid://2319083910",
    "rbxassetid://1442700745",
    "rbxassetid://1629649299"
}
function CollectAttackTokens(x)
    x = x or 50
    for k, v in pairs(game.workspace.Collectibles:GetDescendants()) do
        if v.Name == "C"
        and not v:FindFirstChild("Ignored")
        and v:FindFirstChild("FrontDecal")
        and table.find(AttackTokens, v.FrontDecal.Texture) 
        and (v.Position - plr.Character:WaitForChild("HumanoidRootPart").CFrame.Position).magnitude <= x then
            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(v.Position) + Vector3.new(0, 3, 0)
            wait(.2)
            local ractvk = Instance.new("IntValue", v)
            ractvk.Name = "Ignored"
        end
    end
end

function GetTunnel()
    for _, v in ipairs(game.Workspace.Monsters:GetChildren()) do
        if string.match(v.Name, "Tunnel") then
            if v:FindFirstChild("Config") then
                if v:FindFirstChild("Hunter") then
                    if v.Hunter.Value == plr.Name then
                        return v
                    end
                end
            end
        end
    end
end

function GetKing()
    for _, v in ipairs(game.Workspace.Monsters:GetChildren()) do
        if v.Name=="King Beetle (Lvl 7)" then
            if v:FindFirstChild("Config") then
                if v:FindFirstChild("Hunter") then
                    if v.Hunter.Value == plr.Name then
                        return v
                    end
                end
            end
        end
    end
end

local ccsnail = false



function GetMobIns(Mob)
    return game.Workspace.MonsterSpawners:FindFirstChild(Mob)
end
function GetAttach(Mob)
    local Att = Mob:FindFirstChild("Attachment")
    if Att then
        return Att
    else
        return Mob:FindFirstChild("TimerAttachment")
    end
end

local MonsterTypeMD = require(game.ReplicatedStorage.MonsterTypes)

function CheckMob(Mob)
    if TimerMob[Mob]==nil then return end

    for k, v in pairs(TimerMob[Mob]) do
        local t = GetMobIns(v)
        if t then 
            local data = TvkStatCache.MonsterTimes

            local rac2 = data[v]
            if rac2 then 
                local Reduce = 0
                pcall(function() 
                    Reduce = TvkStatCache.ModifierCaches.Value.MonsterCooldownReduction._
                end)
                Reduce=1-Reduce
                local cac = os.time()-rac2
                local rac = MonsterTypeMD.Get(t.MonsterType.Value).Stats.RespawnCooldown
                
                if cac>rac*Reduce+30 then 
                    return {
                        Part = t,
                        Status = function()
                            local data = TvkStatCache.MonsterTimes
                            local rac2 = data[v]
                            local cac = os.time()-rac2
                            local rac = MonsterTypeMD.Get(t.MonsterType.Value).Stats.RespawnCooldown
                            return cac>rac*Reduce+30
                        end
                    }
                end
            end
        end
        
        -- if GetAttach(t).TimerGui.TimerLabel.Visible == false then
        --     return t
        -- end
    end
end

function CheckCoco()
    local k = "CoconutCrab"
    local t = GetMobIns(k)
    if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
    
end
function CheckSnail()
    local k = "StumpSnail"
    local t = GetMobIns(k)
    if t then 
    if GetAttach(t).TimerGui.TimerLabel.Visible == false then
        return t
    end
end
end
function CheckTunnel()
    local k = "TunnelBear"
    local t = GetMobIns(k)
    if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
    
end
function reverse(t)
    local n = #t
    local i = 1
    while i < n do
      t[i],t[n] = t[n],t[i]
      i = i + 1
      n = n - 1
    end
  end
function CheckKing()
    local k = "King Beetle Cave"
    local t = GetMobIns(k)
    if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
    
end
function CheckComando()
    local k = "Commando Chick"
    local t = GetMobIns(k)
    if t then 
        if GetAttach(t).TimerGui.TimerLabel.Visible == false then
            return t
        end
    end
    
end

function GetCurrentAmountOfBee()
    local bee = 0
    for _, v in pairs(game.Workspace.Honeycombs:GetChildren()) do
        if tostring(v.Owner.Value) == plr.Name then
            for l, s in pairs(v.Cells:GetChildren()) do
                if s.CellType.Value ~= "Empty" and tostring(s.CellType.Value) ~= "nil" then
                    bee = bee + 1
                end
            end
        end
    end
    
    return bee
end
function CountTabTF(tb) 
    local c = 0
    for k,v in pairs(tb) do 
    
    end
end
function SendHook()
    local HttpService = game:GetService("HttpService")
    local tb = {
        ["content"] = "",
        ["embeds"] = {{
            ["title"] = "Bee Swarm Simulator",
            ["description"] = "",
            ["type"] = "rich",
            ["color"] = tonumber(0xbdce44),
            ["fields"] = ListToField(),
            ["footer"] = {
                ["icon_url"] = "https://cdn.discordapp.com/attachments/832985237638086660/843786018892939284/turtle.png",
                ["text"] = "Sea Hub (" .. os.date("%X") .. ")"
            }
        }}
    }
    
    local a =
        syn.request(
        {
            Url = Settings.WebHookUrl,
            Method = "POST",
            Body = HttpService:JSONEncode(tb),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        }
    )
    return a.Body
end
function SendHookCT(ct)
    local HttpService = game:GetService("HttpService")
    local tb = {
        ["content"] = "",
        ["embeds"] = {{
            ["title"] = "Bee Swarm Simulator",
            ["description"] = "",
            ["type"] = "rich",
            ["color"] = tonumber(0xbdce44),
            ["fields"] = ct,
            ["footer"] = {
                ["icon_url"] = "https://cdn.discordapp.com/attachments/832985237638086660/843786018892939284/turtle.png",
                ["text"] = "Sea Hub (" .. os.date("%X") .. ")"
            }
        }}
    }
    
    local a =
        syn.request(
        {
            Url = Settings.WebHookUrl,
            Method = "POST",
            Body = HttpService:JSONEncode(tb),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        }
    )
    return a.Body
end
local NPCLV = {
    [1] = {
        "Black Bear",
        "Mother Bear",
        "Brown Bear",
        "Riley Bee",
        "Bucko Bee",
        "Bee Bear 4"
    },
    [5] = {
        "Panda Bear"
    },
    [10] = {
        "Science Bear"
    },
    [15] = {
        "Polar Bear",
        "Honey Bee"
    },
    [30] = {
        "Onett"
    },
    [35] = {
        "Spirit Bear"
    }
}
local FieldLV = {
    [1] = {
        "Mushroom Field",
        "Blue Flower Field",
        "Sunflower Field",
        "Dandelion Field",
        "Clover Field"
    },
    [5]={
        "Strawberry Field",
        "Bamboo Field",
        "Spider Field"
    },
    [10] = {
        "Pineapple Patch",
        "Stump Field"
    },
    [15] = {
        "Rose Field",
        "Pine Tree Forest",
        "Pumpkin Patch",
        "Cactus Field"
    },
    [25] = {
        "Mountain Top Field"
    },
    [35] = {
        "Coconut Field",
        "Pepper Patch"
    }
}
function RedBlueWhite(bee)
    local FieldColor = {
        ["Red"] = "Strawberry Field",
        ["Blue"] = "Pine Tree Forest",
        ["White"] = "Pineapple Patch"
    }
    if bee < 5 then
        FieldColor["Red"] = "Mushroom Field"
        FieldColor["Blue"] = "Blue Flower Field"
        FieldColor["White"] = "Sunflower Field"
    else
        if bee >= 5 and bee < 15 then
            FieldColor["Red"] = "Strawberry Field"
            FieldColor["Blue"] = "Bamboo Field"
            FieldColor["White"] = "Spider Field"
        else
            if bee >= 15 then
                FieldColor["Red"] = "Rose Field"
                FieldColor["Blue"] = "Pine Tree Forest"
                FieldColor["White"] = "Pumpkin Patch"

                if bee >= 35 then
                    if not CheckCoco() then
                        FieldColor["White"] = "Coconut Field"
                    end
                    FieldColor["Red"] = "Pepper Patch"
                end
            end
        end
    end
    return FieldColor
end
local col = {"Red", "Blue", "White"}
local FieldColor = {
    ["Red"] = "Strawberry Field",
    ["Blue"] = "Pine Tree Forest",
    ["White"] = "Pineapple Patch"
}
function CheckQuestReq(Field) 
    local curr = GetCurrentAmountOfBee()
    for k,v in pairs(NPCLV) do 
        if table.find(v,Field) then 
            return curr>=k
        end
    end
   return false
end
function CheckFieldReq(Field) 
    local curr = GetCurrentAmountOfBee()
    for k,v in pairs(FieldLV) do 
        if table.find(v,Field) then 
            return curr>=k
        end
    end
   return false
end
local secure_call = syn.secure_call

local connect
local funcwrap
local ret
local ListFunc = {}
local old
local connect2
old = hookmetamethod(game,"__index",function(...) 
    if checkcaller() then return old(...) end
    if not connect then 
        connect=Instance.new("IntValue")
        connect.Changed:Connect(function(val)
            if val==100 then 
                for k,v in pairs(ListFunc) do 
                    if not v.Done then 
                        spawn(function() 
                            local s,e = pcall(function() 
                                v.Res = k()
                            end)
                            if e then print(e) end
                            v.tvk = true
                            connect2.Value=100
                            connect2.Value=0
                        end)
                        v.Done=true
                    end
                end
            end 
        end)
    end
    return old(...)
end)
repeat wait() until connect
function warpF2(f) 
    if not connect2 then 
        connect2=Instance.new("IntValue")
    end
    ListFunc[f] = {}


    connect.Value=100
    connect.Value=0
    
    while not ListFunc[f].tvk do 
        connect2.Changed:Wait()
    end
    local res = ListFunc[f].Res
    ListFunc[f] = nil
    return res
end


function newsclosure(f) 
    return function()
        local ret
        secure_call(function() 
            ret=f()
         end,game:GetService("Players").LocalPlayer.PlayerScripts.Listeners)
         return ret
    end
end

function GetQuestListMD()
    local v1 = require(game.ReplicatedStorage.Quests)

    local v5 = require(game.ReplicatedStorage.NPCs)
    local ListQuest = {}
    warpF2(function() 
        local v91 = TvkStatCache
        for v96, v97 in pairs(v91.Quests.Active) do
            local l__Name__98 = v97.Name
            local v99 = v1:Get(l__Name__98)
            if
                v99.NPC and v99.Theme ~= "Xmas" and not v99.Hidden and
                    (not v99.Expiration or require(game.ReplicatedStorage.OsTime)() < v99.Expiration)
             then
                local v101 = v1:Progress(l__Name__98, v91)
                local v102 = true
                local ListTask = {}
                for v103, v104 in ipairs(v99.Tasks) do
                    local v58 = v104.Description
                    if type(v58) ~= "string" then
                        v58 = v58(TvkStatCache)
                    end
                    local Task = {
                        Description = v58,
                        IsCompleted = function()
                            return warpF2(function() 
                                local v102 = true
                                local v91 = TvkStatCache
                                local v101 = v1:Progress(l__Name__98, v91)
                                if v101 and v101[v103] and v101[v103][1] < 1 then
                                    return false
                                end
                                return true
                            end)
                        end,
                        Type = v104.Type,
                        Zone = v104.Zone,
                        Item = v104.Item,
                        MonsterType = v104.MonsterType,
                        Tag = v104.Tag,
                        Color = v104.Color,
                        Toy = v104.Toy
                    }
                    table.insert(ListTask, Task)
                end
                ListQuest[v99.NPC] = ListTask
            end
        end
    end)
    return ListQuest
end

function GetQuestNPC(npc)
    local ListQuest = GetQuestListMD()
    for k, v in pairs(ListQuest) do
        if k == npc then
            return v
        end
    end
end

function GetQuestType(quest)
    local type = ""
    if quest.Type == "Collect Pollen" then
        if quest.Zone then
            type = "Zone"
        elseif quest.Color then
            type = "Color"
        else
            tpye = "Pollen"
        end
    elseif quest.Type == "Defeat Monsters" then
        type = "Kill"
    elseif quest.Type == "Use Items" then
        type = "Use"
    elseif quest.Type == "Use Toy" then
        type = "Toy"
    elseif quest.Type == "Collect Tokens" then
        type = "Token"
    elseif quest.Type == "Collect Goo" then
        if quest.Zone then
            type = "Zone"
        elseif quest.Tag then
            type = "Color"
        else
            type = "Goo"
        end
    end
    return type
end

function GetQuestTable(quest)
    local questtb = {}
    for k, v in pairs(quest) do
        local type = GetQuestType(v)
        if not questtb[type] then
            questtb[type] = {}
        end
        table.insert(questtb[type], v)
    end
    return questtb
end

function GetAntQuest(QuestTF)
    for k, v in pairs(QuestTF) do
        if v then
            local QuestNPC = GetQuestNPC(k)
            if QuestNPC then
                local QuestTb = GetQuestTable(QuestNPC)
                if QuestTb["Kill"] then
                    for k, v in pairs(QuestTb["Kill"]) do
                        if not v.IsCompleted() then
                            if v.MonsterType then
                                if string.match(v.MonsterType, "Ant") then
                                    return v
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end



local PopStarAura = "5101328809"
function IsPopStar()
    for k,v in pairs(ListTileGrid) do 
        local PlGui = v
        for _,v in pairs(PlGui:GetChildren()) do 
            if v:FindFirstChild("BG") then 
                  if v.BG:FindFirstChild("Icon") then 
                        if string.match(v.BG.Icon.Image,PopStarAura) then return true end
                  end
            end
      
      end
    end
    
    return false
end
local nll = require(game:GetService("ReplicatedStorage").BlenderRecipes)
local HttpService = game:GetService("HttpService")
function GetItemListWithValue()
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    local data = StatCache.Get()
    return data.Eggs
end
function CheckNguyenLieu(ng) 
local ind = nll.Get(ng)
local k = false
for k,v in pairs(ind.Ingredients) do 
local t = GetItemListWithValue()
if t[v.Type] and (t[v.Type]>= v.Amount) then 
else
    k=true
    break;
end
end
if not k then return true else return false end
end
local cls = require(game.ReplicatedStorage.ClientStatCache)
local StatCache = require(game.ReplicatedStorage.ClientStatCache)
local ostime=require(game.ReplicatedStorage.OsTime)

local oldhoney = StatCache.Get().Totals.Honey
getgenv().HoneyMade = 0
spawn(function()
    while wait(4) do
        getgenv().HoneyMade = StatCache.Get().Totals.Honey - oldhoney
    end
end)

function GetCraftingStatus() 
local data = game:GetService("ReplicatedStorage").Events.RetrievePlayerStats:InvokeServer()
local blender = data.BlenderState

if not blender then return 0 end
local n = blender.Count
local Start = blender.StartTime

local v32 = data.PlaytimeAtLoad;
local v33 = data.LoadTime;
local v29 = blender

local v34 = v32 + (ostime() - v33) - v29.StartTime;
local f = (60*n*5-v34)/60
if f<=0 then return 1,blender end
return 2,blender
end
function FireTouch(part) 
    if plr.Character:FindFirstChild("HumanoidRootPart") then 
        firetouchinterest(plr.Character:WaitForChild("HumanoidRootPart"), part, 0)
        firetouchinterest(plr.Character:WaitForChild("HumanoidRootPart"), part, 1)    
    end
     
end
function God()
    Instance.new("BoolValue",plr.Character).Name="Godded"
    local cam = workspace.CurrentCamera
    local cf = cam.CFrame
    local me = plr
    local c, h =
        (me.Character or workspace:FindFirstChild(me.Name)),
        me.Character:FindFirstChildOfClass("Humanoid")
    local nh = h:Clone()
    nh.Health = nh.MaxHealth
    me.Character = nil
    nh:SetStateEnabled(15, false)
    nh:SetStateEnabled(1, false)
    nh:SetStateEnabled(0, false)
    nh.Parent = c
    h:Destroy()
    me.Character, cam.CameraSubject = c, nh
    wait()
    cam.CFrame = cf
    local s = c:FindFirstChild("Animate")
    if s then
        s.Disabled = true
        wait()
        s.Disabled = false
    end
    delay(
        1,
        function()
            if nh then
                nh.Health = 256
            end
        end
    )
    for i=1,10 do 
        FireTouch(game:GetService("Workspace").Map.Ground.Campsite.Lava)
    end
end
function GetItemListWithValue()
    local HttpService = game:GetService("HttpService")
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    local data = StatCache.Get()
    return data.Eggs
end
function GetItemList()
    local ks = GetItemListWithValue()
    local tb = {}
    for k, v in pairs(ks) do
        table.insert(tb, k)
    end
    return tb
end
function IsInstantValid(Instant)
    local replicatedstorage = game:GetService("ReplicatedStorage")
    local rep = replicatedstorage
    local r = require
    local player = plr

    local function getTimeSinceToyActivation(name)
        return r(rep.OsTime)() - r(rep.ClientStatCache):Get("ToyTimes")[name]
    end

    local function getTimeUntilToyAvailable(n)
        return workspace.Toys[n].Cooldown.Value - getTimeSinceToyActivation(n)
    end
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    local gt = StatCache.Get()
    local toy = gt["ToyTimes"]
    if toy[Instant] then
        return getTimeUntilToyAvailable(Instant) <= 0
    else
        return false
    end
end

function UseInstant(Instant)
    game.ReplicatedStorage.Events.ToyEvent:FireServer(Instant)
end

function IsAnyInstantValid()
    local Lis = GetInstantList()
    for k, v in pairs(Lis) do
        if IsInstantValid(v.Name) then
            return true
        end
    end
    return false
end
function UnGod()
    if not plr.Character:FindFirstChild("Godded") then return end
    local cam = workspace.CurrentCamera
    local cf = cam.CFrame
    local me = plr
    local c, h =
        (me.Character or workspace:FindFirstChild(me.Name)),
        me.Character:FindFirstChildOfClass("Humanoid")
    local nh = h:Clone()
    nh.Health = nh.MaxHealth
    me.Character = nil
    nh:SetStateEnabled(15, true)
    nh:SetStateEnabled(1, true)
    nh:SetStateEnabled(0, true)
    nh.Parent = c
    h:Destroy()
    me.Character, cam.CameraSubject = c, nh
    wait()
    cam.CFrame = cf
    local s = c:FindFirstChild("Animate")
    if s then
        s.Disabled = false
        wait()
        s.Disabled = true
    end
    delay(
        1,
        function()
            if nh then
                nh.Health = 0
            end
        end
    )
end
function GetEquipSrinkler()
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    return StatCache["Get"]()["EquippedSprinkler"]
end


loadstring([[
    function GetFieldByText(text) 
        for k,v in pairs(GetListField()) do 
            if string.match(text,v) then return v end
        end
    end
    function GetNerestFieldByObject(Obj)
        local lis = GetListField()
        local old = "Sunflower Field"
        for k, v in pairs(lis) do
            if v then
                if
                    (Obj.Position - GetFieldByName(v).Position).magnitude <
                        (Obj.Position - GetFieldByName(old).Position).magnitude
                 then
                    old = v
                end
            end
        end
        return old
    end

]])()


local ValidPos = {}


local ksf = nil




local HoneyTokenId="1472135114"




-- TVK LIB
local cac = loadstring([[
    plr = game.Players.LocalPlayer
    getgenv().IsValidTokenPos = function(token, Field,infield)
        local kc = 60
        local Field = GetFieldByName(Field)
        if Field:FindFirstChild("Range") then kc=Field.Range.Value end
        local bool = false
        local Character = plr.Character
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
        if (token.Position - Field.Position).magnitude < kc then
            bool = true
        end
        if infield and bool then 
            for k,v in pairs(infield.List) do
                if (token.Position-v.p).magnitude>infield.Range then return false end
            end
            return true
        end
        return bool
    end
    function IsValidCharactPos(Field)
        local bool = false
        local Character = plr.Character
        local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
        local Field = GetFieldByName(Field)
        local kc = 60
        if Field:FindFirstChild("Range") then kc=Field.Range.Value end
        if (Field.Position - HumanoidRootPart.Position).magnitude < kc then
            bool = true
        end
        
        return bool
    end

        getgenv().IsTokenBlacklist = function(token)
        if token:FindFirstChild("Blacklisted") then
            return true
        end
        return false
    end

    getgenv().IsToken = function(token)
        if token == nil then
            return false
        end
        if not token.Parent then return false end
        if token then
            if token.Orientation.Z ~= 0 then
                return false
            end
            if token:FindFirstChild("FrontDecal") then
            else
                return false
            end
            if not token.Name == "C" then
                return false
            end
            if not token:IsA("Part") then
                return false
            end
            return true
        else
            return false
        end
    end

    function GetNerestToken(Field,t,ListAllToken,FieldPosIn)
        local token
        local Character = plr.Character
        local HumanoidRootPart =t or Character:FindFirstChild("HumanoidRootPart")
        if not HumanoidRootPart then return end
        local h = HumanoidRootPart.Position
        local Piro = {}
        if ListAllToken[Field] then 
            local FieldTokens = ListAllToken[Field]
            for k, ss in pairs(FieldTokens) do
                if k~="None" then 
                    local tok
                    for k,v in ipairs(ss) do 
                        if getgenv().IsToken(v) and getgenv().IsValidTokenPos(v, Field,FieldPosIn) and getgenv().isActiveTokens(v) and not getgenv().IsTokenBlacklist(v) then 
                            if not tok then tok=v end
                            if (v.Position-h).magnitude < (tok.Position-h).magnitude then 
                                tok=v
                            end
                        end
                    end
                    if tok then 
                        Piro[tok]=(tok.Position-h).magnitude
                    end
                end
            end
            local sml
            for k,v in pairs(Piro) do 
                if not sml then sml=k end
                if v<Piro[sml] then sml=k end
            end
            if sml then return sml end
            local tok
            if ListAllToken[Field].None then 
                for _,v in ipairs(ListAllToken[Field].None) do 
                    if getgenv().IsToken(v) and getgenv().IsValidTokenPos(v, Field,FieldPosIn) and getgenv().isActiveTokens(v) and not getgenv().IsTokenBlacklist(v) then 
                        if not tok then tok=v end
                        if (v.Position-h).magnitude < (tok.Position-h).magnitude then 
                            tok=v
                        end
                    end
                end
            end
            do return tok end
            if tok and IsValidTokenPos(tok,Field,FieldPosIn) then 
                return tok
            end
            
        else
            return nil
        end
    end    
]])()


function NoFire(token) 
    local ray = Ray.new(token.Position+Vector3.new(0,1,0), Vector3.new(0, -5, 0))
    local t = workspace:FindPartOnRayWithIgnoreList(ray, {token,game.Workspace.Bees,plr.Character})
    if t and t:FindFirstChild("FireParticles") then 
        return false
    end

end
function CheckPollenValid(pollen) 
    local name,x,y=GetXY(pollen)
    if not name or not x or not y then return end
    x=tonumber(x)
    y=tonumber(y)
    local token = pollen
    
    if token then 
        if not NoFire(token) then return false end
    end

    local token = GetFlower(name,x,y+1)
    if token then 
        if not NoFire(token) then return false end
    end
    

    local token = GetFlower(name,x,y-1)

    if token then 
        if not NoFire(token) then return false end
    end

    local token = GetFlower(name,x+1,y)

    if token then 
        if not NoFire(token) then return false end
    end

    local token = GetFlower(name,x-1,y)

    if token then 
        if not NoFire(token) then return false end
    end
    return true
end
function GetComandoMob()
    for k, v in pairs(game.Workspace.Monsters:GetChildren()) do
        if string.match(v.Name, "Commando") then
            if v:FindFirstChild("Target")
            and v:FindFirstChild("Humanoid")
            and v:FindFirstChild("HumanoidRootPart") then
                if tostring(v.Target.Value) == plr.Name then
                    return v
                end
            end
        end
    end
end
local Last
function tpT(t, k, dieukien, disableinstanttp,instanttp)
    if Last then Last() Last=nil end
    if not plr.Character:FindFirstChild("HumanoidRootPart")  or not plr.Character:FindFirstChild("UpperTorso") then return end
    if instanttp then 
        plr.Character.HumanoidRootPart.CFrame=t
        return
    end
    if plr.Character:FindFirstChild("HumanoidRootPart") and not disableinstanttp
    and (plr.Character.HumanoidRootPart.Position-t.p).magnitude < 80 then 
        plr.Character.HumanoidRootPart.CFrame=t
    else
        if not k then
            k = 100
        end
        local tween_s = game:service "TweenService"
        local info =
            TweenInfo.new(
            (plr.Character:WaitForChild("HumanoidRootPart").Position - t.p).magnitude / k,
            Enum.EasingStyle.Linear
        )
        local breakdk = false
        local tic_k = tick()
        local cframe
        if plr.Character.UpperTorso:FindFirstChild(rnd) then 
            cframe= CFrame.lookAt(t.Position, plr.Character.UpperTorso[rnd].CFrame.lookVector)
        else
            cframe = CFrame.lookAt(t.Position, plr.Character.HumanoidRootPart.CFrame.lookVector)
        end
        local tween, err =
            pcall(
            function()
                local tween =
                    tween_s:Create(plr.Character:WaitForChild("HumanoidRootPart"), info, {CFrame = cframe})
                local done = false
                local Stop = function() done=true end
                Last=Stop
                tween.Completed:Connect(
                    function()
                        done = true
                    end
                )
                SetEN("Noclip", "Tween", true)
                tween:Play()
                while not done do
                    if not plr.Character:FindFirstChild("HumanoidRootPart") then return end
                    SetEN("Noclip", "Tween", true)
                    if (plr.Character.HumanoidRootPart.Position - Vector3.new(30.017883300781, 68.458869934082, -146.99607849121)).magnitude <= 130
                    and plr.Character.HumanoidRootPart.Position.Y >= 60
                    and plr.Character.HumanoidRootPart.Position.Y < 80
                    and (plr.Character.HumanoidRootPart.Position-t.p).magnitude < 50 and not disableinstanttp then 
                        tween:Cancel()
                        done=true
                        plr.Character.HumanoidRootPart.CFrame = t
                        break
                    end
                    if  ((plr.Character.HumanoidRootPart.Position-t.p).magnitude < 80 or instanttp) and not disableinstanttp then 
                        tween:Cancel()
                        done=true
                        plr.Character.HumanoidRootPart.CFrame = t
                        break
                    end
                    if dieukien and type(dieukien)=="function" then 
                        if not dieukien() then 
                            tween:Cancel()
                            done=true
                            breakdk=true
                            break;
                        end
                    end
                    wait()
                end
                tween:Cancel()
                SetEN("Noclip", "Tween", false)
            end
        )
        SetEN("Noclip", "Tween", false)
        return breakdk;
    end
end
function Tweenn(t, speed)
    local cantp = tpT(t, speed, function() 
        return (plr.Character:WaitForChild("HumanoidRootPart").Position-t.p).magnitude >= Settings.NearTPMag
    end, true)
    if Settings.NearTP
    and cantp then 
        plr.Character.HumanoidRootPart.CFrame = CFrame.new(t.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, t.Position.Z) 
    end
end
getfenv().Settings=Settings
function Walkk(t, token,dieukien)
    if Settings.MovementMethod == "Tween" then
        local tP = t.Position
        Tweenn(CFrame.new(tP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, tP.Z), Settings.TweenSpeed)
    else
        local Character = plr.Character
        local Humanoid = Character:WaitForChild("Humanoid")
        local stop = false
        Character:WaitForChild("Humanoid"):MoveTo(t.p)
        Character:WaitForChild("Humanoid").MoveToFinished:Connect(
            function()
                stop = true
            end
        )
        local a = tick()
        while (stop == false) do
            if Call then
                Call()
            end
            wait()
            if (token and not getgenv().IsToken(token)) then
            Character:WaitForChild("Humanoid"):Move(Vector3.new(0, 0, 0))
                stop=true
                return
            end
            if dieukien and not dieukien() then 
                Character:WaitForChild("Humanoid"):Move(Vector3.new(0, 0, 0))
                stop=true
                return
            end
            if tick() - a >= 5  then
                Character:WaitForChild("Humanoid"):Move(Vector3.new(0, 0, 0))
                plr.Character:WaitForChild("HumanoidRootPart").CFrame = t
                stop = true
            end
            if Settings.NearTP and (plr.Character:WaitForChild("HumanoidRootPart").Position-t.p).magnitude <= Settings.NearTPMag then
                local a, b, c = plr.Character.HumanoidRootPart.CFrame:ToEulerAnglesXYZ()
                plr.Character.HumanoidRootPart.CFrame = CFrame.new(t.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, t.Position.Z) * CFrame.Angles(a, b, c)
                stop=true
                return
            end
        end
    end
end

function TpToHive()
    local sp = plr.SpawnPos.Value.p
    local p = CFrame.new(sp.X, sp.Y, sp.Z, -0.996, 0, 0.02, 0, 1, 0, -0.02, 0, -0.9) + Vector3.new(0, 0, 8)
    Going = true
    tpT(p, 100)
    Going = false
end
function TpToField(Field,dk)
    local p = GetFieldByName(Field).CFrame * CFrame.new(0, 0, 0) + Vector3.new(0, 8, 0)
    return tpT(p, 100,dk)
end
function IsBackPackFull(a)
    local bool = false
    local Player = plr
    local Character = Player.Character
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    if not a then a = 100 end
    if Player.CoreStats.Pollen.Value >= (Player.CoreStats.Capacity.Value*a)/100 then
        bool = true
    end
    return bool
end
local choithuoc = tick()
function Dig()
    coroutine.wrap(
        function()
            local tool
            for _, v in pairs(plr.Character:GetChildren()) do
                if v:IsA("Tool") and v:FindFirstChild("ClickEvent") then
                    tool = v
                end
            end
            local s, e =
                pcall(
                function()
                    if tool and getsenv and not is_sirhurt_closure and not PROTOSMASHER_LOADED then -- Sirhurt and proto argggg
                        local t = getsenv(tool.ClientScriptMouse).collectStart
                        t()
                    else
                        if tool then
                        tool.ClickEvent:FireServer()
                        end
                    end
                end
            )
            if e then
                pcall(
                    function()
                        if tool then
                        tool.ClickEvent:FireServer()
                        end
                    end
                )
            end
        end
    )()
    pcall(
        function()
            if tick()-choithuoc<0.2 then 
                workspace.NPCs.Onett.Onett["Porcelain Dipper"].ClickEvent:FireServer()
                choithuoc=tick()
            end            
            --DigOther()
        end
    )
end

loadstring([[
    function IsSprout()
        local Particles = game.Workspace.Particles
        local Folder2 = Particles.Folder2
        for k, v in pairs(Folder2:GetChildren()) do
            if v.Name == "Sprout" then
                return v
            end
        end
        return nil
    end
]])()

function GetCurrenItem(Item)
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    local a = StatCache.Get()["Eggs"][Item]
    if a then return a else return 0 end
end
function GetCurrenMicro()
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    return StatCache.Get()["Eggs"]["Micro-Converter"]
end

function IsBuffOn(Buff)
    for k,v in pairs(ListTileGrid) do 
        local PlGui = v
        for k, v in pairs(PlGui:GetChildren()) do
            if v:FindFirstChild("BG") then
                if v.BG:FindFirstChild("Icon") then
                    if string.match(v.BG.Icon.Image, BarId[Buff]) then
                        return true
                    end
                end
            end
        end
    end
    
    return false
end
function GetMemoList()
    local tab = {}
    for k, v in pairs(game.Workspace.Toys:GetChildren()) do
        if string.match(v.Name, "Memory Match") then
            table.insert(tab, v)
        end
    end
    return tab
end

function GetInstantList()
    local tab = {}
    for k, v in pairs(game.Workspace.Toys:GetChildren()) do
        if string.match(v.Name, "Instant Converter") then
            table.insert(tab, v)
        end
    end
    return tab
end
function ObjListTostring(tabl)
    local Tab = {}
    for k, v in pairs(tabl) do
        table.insert(Tab, v.Name)
    end
    return Tab
end
local TFItemHook = ListToOb(GetItemList())

if not Settings.TFItemHook then Settings.TFItemHook=TFItemHook else TFItemHook=Settings.TFItemHook end
function ListToField()
    local ListAll = GetItemListWithValue()
    local fields = {}

    if Settings.WHShowHoney then
        table.insert(
            fields,
            {
                name = "Stats",
                value = "Honey: " .. tostring(formatNumber(plr.CoreStats.Honey.Value)) ..
                "\nPollen: " .. tostring(formatNumber(plr.CoreStats.Pollen.Value))
                .. "\nHoney Made: " .. formatNumber(getgenv().HoneyMade),
                inline = false
            }
        )
    end
        local ItemsValue = ""
        for k, v in pairs(TFItemHook) do
            if v then
                ItemsValue = ItemsValue .. k .. ": " .. tostring(ListAll[k]) .. "\n"
            end
        end
        if ItemsValue~="" then 
            table.insert(
                fields,
                {
                    name = "Items",
                    value = ItemsValue,
                    inline = false
                }
            )
        end
        

    return fields
end
function CollectAllTokenInField()
    for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
        if
            getgenv().IsToken(v) and
                getgenv().IsValidTokenPos(v, GetNerestFieldByObject(plr.Character:WaitForChild("HumanoidRootPart")))
         then
            Walkk(
                CFrame.new(
                    v.Position.X,
                    plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                    v.Position.Z
                )
            )
        end
    end
end
function UseAnt()
    game.ReplicatedStorage.Events.ToyEvent:FireServer("Ant Challenge")
end
function NormalSell()
    local old = TvkStatCache.SessionAccessories.Hat
    if Settings.EquipHoneySell then 
        game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Equip", {
            ["Mute"] = true,
            ["Type"] = "Honey Mask",
            ["Category"] = "Accessory"
        })
    end
    local Player = plr
    local Character = Player.Character
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    local sangzboi = HumanoidRootPart.CFrame
    TpToHive()
    wait(.2)
    game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking")
    wait(.5)
    repeat
        local tpos = plr.PlayerGui.ScreenGui.ActivateButton
        if tpos.AbsolutePosition.Y ~= 4 then
            game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking")
            TpToHive()
            wait(.5)
        end
        if string.match(tpos.TextBox.Text, "Stop") then
        else
            if string.match(tpos.TextBox.Text, "Collect") then
            else
                if string.match(tpos.TextBox.Text, "Talk") then
                else
                    game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer(
                        "ToggleHoneyMaking"
                    )
                    wait(.5)
                end
            end
        end
        wait()
    until (function() if Settings.ConvertBallon then 
    if GetHiveBallon(Settings.ConvertAtB or 0) then return false end
    end 
    if Player.CoreStats.Pollen.Value <= 0 then return true end
end)() or not Settings.Farm or not Running or not ValidFarm()
    wait(3)
    game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Equip", {
        ["Mute"] = true,
        ["Type"] = old,
        ["Category"] = "Accessory"
    })
end
local Temp = {
    Noclip = {}
}
function CheckEN(str)
    local cac = Temp[str]
    for k, v in pairs(cac) do
        if v then
            return true
        end
    end
    return false
end
function SetEN(str, cac, rac)
    Temp[str][cac] = rac
end
setfflag("HumanoidParallelRemoveNoPhysics", "False")
setfflag("HumanoidParallelRemoveNoPhysicsNoSimulate2", "False")
game:GetService('RunService').Stepped:Connect(function()
    if CheckEN("Noclip") then plr.Character.Humanoid:ChangeState(11)
    end
end)
function GetValidAntPos() 
    local mid=CFrame.new(93.422752380371, 31.946582794189, 553.12829589844)
    local left=CFrame.new(93.422752380371, 31.946582794189, 553.12829589844)
    local right = CFrame.new(92.35001373291, 31.946582794189, 532.30163574219)

    local tb = {
        mid=CFrame.new(93.422752380371, 31.946582794189, 553.12829589844),
        left=CFrame.new(89.871429443359, 31.946582794189, 571.10089111328),
        right= CFrame.new(86.353813171387, 31.946582794189, 527.67553710938)
    }
    local fk = {}
    for k,v in pairs(tb) do fk[k]=false end
    local has = false
    for i,v in pairs(workspace.Toys["Ant Challenge"].Obstacles:GetChildren()) do
        if v:FindFirstChild("Root") then
            local root = plr.Character:FindFirstChild("HumanoidRootPart")
            if root then 
                if true  then
                    has=true
                    local vpos = v.Root.Position
                    local near,ractvk = nil
                    for k,v in pairs(tb) do 
                        if not ractvk then ractvk = k end
                        if (v.p-vpos).magnitude< (tb[ractvk].p-vpos).magnitude then 
                            --near=v
                            ractvk=k
                        end
                    end
                    if ractvk then 
                        fk[ractvk]=true
                    end
                end
            end
        end
    end
    if has then 
        for k,v in pairs(fk) do 
            if not v then return tb[k] end
        end
    end
    
    return tb["mid"]

end
function CheckNear(pos,mob) 
    for k,v in pairs(game.Workspace.Monsters:GetChildren()) do 
        if string.match(v.Name,mob) then 
            if v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart") then 
                if ((v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart")).Position-pos.p).magnitude<20 then 
                    return true
                end
            end
        end
    end
    return false
end
function GetPuffRoomLevel(v) 
--    game:GetService("Workspace").Happenings.Puffshrooms.PuffballMushroomModelCommon["Puffball Top"].Attachment.Gui.NameRow.TextLabel
    local level = 25
    if v:FindFirstChild("Puffball Top") and v["Puffball Top"]:FindFirstChild("Attachment") and  v["Puffball Top"].Attachment:FindFirstChild("Gui") and  v["Puffball Top"].Attachment.Gui:FindFirstChild("NameRow") and v["Puffball Top"].Attachment.Gui:FindFirstChild("NameRow"):FindFirstChild("TextLabel") then 
        while level>0 do 
            if v["Puffball Top"].Attachment.Gui.NameRow.TextLabel.Text:find(tostring(level)) then 
                return level
            end
            level=level-1
        end
    end
    return 0
end

function PiroField(v,f) 
    local Field = Settings.PuffField
    local FieldTf=ToTrueFalse(Field,true)
    for k,v in pairs(v) do 
        if v:FindFirstChild("Puffball Stem") and FieldTf[GetNerestFieldByObject(v["Puffball Stem"])] then 
            return v
        end
    end
    
    if f then return end

    local Nearest
    for k,v in pairs(v) do 
        if not Nearest and v:FindFirstChild("Puffball Stem") then Nearest=v end
        if plr.Character:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Puffball Stem") then 
            if (plr.Character.HumanoidRootPart.Position-v["Puffball Stem"].Position).magnitude<(plr.Character.HumanoidRootPart.Position-Nearest["Puffball Stem"].Position).magnitude then 
                Nearest=v
            end
        end
    end
    return Nearest
end
function GetCurrentHive() 
    for k,v in ipairs(game:GetService("Workspace").Honeycombs:GetChildren()) do 
        if tostring(v.Owner.Value)==plr.Name then 
            return v
        end
    end
end
loadstring([[
    function GetBallonLevel(v,max) 
        if pcall(function() return v.BalloonBody.GuiAttach.Gui.BlessingBar.TextLabel end) then 
            local text =v.BalloonBody.GuiAttach.Gui.BlessingBar.TextLabel.Text
            for i=1,200 do 
                if text=="🎈 Blessing x"..i then 
                    return i
                end
            end
        end
    end
]])()
function GetHiveBallon(bl)
    local Hive = GetCurrentHive()
    if Hive then 
        for k,v in ipairs(game:GetService("Workspace").Balloons.HiveBalloons:GetChildren()) do 
            if v:FindFirstChild("BalloonRoot") then 
                if (v.BalloonRoot.Position - Hive.SpawnPos.Value.p).magnitude<30 then 
                    local lv = (v:FindFirstChild("Level") and v.Level.Value) or GetBallonLevel(v)
                    if lv then 
                        if not v:FindFirstChild("Level") then 
                            local levl = Instance.new("IntValue",v)
                            levl.Name="Level"
                            levl.Value=lv
                        end
                        if lv>=bl then return v end
                    end
                    
                end
            end
        end
    end
end
function GetRaity(puff) 
    for k,v in pairs(PuffRaity) do 
        if string.match(puff.Name,v) then 
            return v
        end
    end
    return "Normal"
end
function GetNearestPushroom(Field)
    local Field = Settings.PuffField
    local FieldTf=ToTrueFalse(Field,true)

    -- Mythic > Legendary > Epic > Level 10+ > Rare > Highest Level
    local ListPuff = {}
    for k,v in pairs(game:GetService("Workspace").Happenings.Puffshrooms:GetChildren()) do
        if v:FindFirstChild("Puffball Stem") then 
            local a = GetRaity(v)
            if PuffRaityTF[a] then 
                if GetPuffRoomLevel(v)>=Settings.MinPuff and GetPuffRoomLevel(v)<=Settings.MaxPuff then 
                    if Settings.FarmPuffOnly then 
                        if FieldTf[GetNerestFieldByObject(v["Puffball Stem"])] then 
                            table.insert(ListPuff,v)
                        end
                    else
                        table.insert(ListPuff,v)
                    end
                    
                end
            end
        end
    end

    -- Mythic > Legendary > Epic
    local BestRaity = {}
    for k,v in pairs(PuffRaity) do 
        table.insert(BestRaity,v)
    end
    if Settings.PuffRMethod=="Normal > Mythic" then 
        reverse(BestRaity)
    end

    local Check=false
    local ReturnList = {}
    for k,v in pairs(BestRaity) do 
        if TPuffRaityTF[v] then 
            for k2,v2 in pairs(ListPuff) do 
                if string.match(v2.Name,v) then table.insert(ReturnList,v2) Check=true end
            end
            if Check then break end
        end
    end
    if Check then 
        return PiroField(ReturnList)
    end
    -- Piro Field
    local piro = PiroField(ListPuff,true)
    if piro then 
        return piro
    end

    -- Highest
    local Highest
    for k,v in pairs(ListPuff) do 
        if v:FindFirstChild("Puffball Stem") then 
            if not Highest then Highest=v end
            if Settings.LevelMethod == "Priority High Level" then 
                if GetPuffRoomLevel(v)>GetPuffRoomLevel(Highest) then Highest=v end
            else
                if GetPuffRoomLevel(v)<GetPuffRoomLevel(Highest) then Highest=v end
            end
        end
    end
    return Highest
end
function GetSortedBubble(Field)
    local token = {}
    local sortedtoken = {}
    for k, v in pairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("Part") then
            if v.Name == "Bubble" then
                if getgenv().IsValidTokenPos(v, Field) and ValidFarm() and Settings.Farm then
                    table.insert(token,v)
                end
            end
        end
    end
    

    local function Por(p)
        local nr
        local kk = 0
        for k, v in pairs(token) do
            if not nr then
                nr = v
                kk = k
            end
            
            if (v.Position - p.Position).magnitude < (nr.Position - p.Position).magnitude then
                nr = v
                kk = k
            end
        
        end
        if nr then
            table.insert(sortedtoken, nr)
            table.remove(token, kk)
            Por(nr)
        end
    end
    Por(plr.Character:WaitForChild("HumanoidRootPart"))
    
    return sortedtoken
end
function GetSortedCrossHair(Field)
    local token = {}
    local sortedtoken = {}
    for k, v in pairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("MeshPart") then
            if v.Name == "Crosshair" then
                if getgenv().IsValidTokenPos(v, Field) and ValidFarm() and Settings.Farm and (v.Color==Color3.fromRGB(144,119,87) or v.Color==Color3.fromRGB(119, 85, 255)) then
                    table.insert(token,v)
                end
            end
        end
    end
    

    local function Por(p)
        local nr
        local kk = 0
        for k, v in pairs(token) do
            if not nr then
                nr = v
                kk = k
            end
            
            if (v.Position - p.Position).magnitude < (nr.Position - p.Position).magnitude then
                nr = v
                kk = k
            end
        
        end
        if nr then
            table.insert(sortedtoken, nr)
            table.remove(token, kk)
            Por(nr)
        end
    end
    Por(plr.Character:WaitForChild("HumanoidRootPart"))
    
    return sortedtoken
end
function GetNearestFire() 
    local nr
    if plr.Character:FindFirstChild("HumanoidRootPart") then 
        for k, v in pairs(game.Workspace.Particles:GetChildren()) do
            if v:IsA("Part") then
                if v.Name == "FlamePart" then
                    if v:FindFirstChild("Fire")
                     then
                        if not nr then 
                            nr=v
                        end
                        if (plr.Character.HumanoidRootPart.Position-v.Position).magnitude < (plr.Character.HumanoidRootPart.Position-nr.Position).magnitude then 
                            nr=v
                        end
                    end
                end
            end
        end
    end
    return nr
end
function GetSortedFlame(Field)
    local token = {}
    local sortedtoken = {}
    for k, v in pairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("Part") then
            if v.Name == "FlamePart" then
                if
                    getgenv().IsValidTokenPos(v, Field) and ValidFarm() and
                        v:FindFirstChild("Fire") and
                        Settings.Farm
                 then
                  table.insert(token,v)
                end
            end
        end
    end
    

    local function Por(p)
        local nr
        local kk = 0
        for k, v in pairs(token) do
            if not nr then
                nr = v
                kk = k
            end
            
            if (v.Position - p.Position).magnitude < (nr.Position - p.Position).magnitude then
                nr = v
                kk = k
            end
        
        end
        if nr then
            table.insert(sortedtoken, nr)
            table.remove(token, kk)
            Por(nr)
        end
    end
    Por(plr.Character:WaitForChild("HumanoidRootPart"))

    return sortedtoken
end

function GetLowestTrans(x)
    local low = math.huge
    local index
    for i, v in pairs(x) do
        if v.Transparency < low then
            low = v.Transparency
            index = i
        end
    end
    return index
end
function GetNearestCoco(x)
    local dist = math.huge
    local index
    for i, v in pairs(x) do
        local magnitude = (v.Position - plr.Character.HumanoidRootPart.Position).magnitude
        if magnitude < dist then
            dist = magnitude
            index = v
        end
    end
    return index
end
local CollectThings = {
    Shower = {},
    Coco = {}
}
local ListTr = {}

local rac = game:GetService("ReplicatedStorage").Events.LocalFX
rac.OnClientEvent:Connect(function(...) 
    if Settings.SmartTr then 
        local cac,rac = ...
        if cac=="Triangulate" then
            if plr.Character:FindFirstChild("HumanoidRootPart") then 
                if rac.Part1==plr.Character.HumanoidRootPart then 
                    table.insert(ListTr,{Start = tick(),Obj = rac})
                end
            end
        end
    else
        while #ListTr>0 do 
            table.remove(ListTr,1)
        end
    end
end)


game.Workspace.Particles.ChildAdded:Connect(function(v) 
    if v.Name=="WarningDisk" then 
        if v.Size.X==30 then 
            table.insert(CollectThings.Coco,v) 
        elseif v.Size.X==8 then
            table.insert(CollectThings.Shower,v) 
        end    
    end
end)

game.Workspace.Particles.ChildRemoved:Connect(function(v) 
    local type
    if v.Name=="WarningDisk" then 
        if v.Size.X==30 then 
            type="Coco"
        elseif v.Size.X==8 then
            type="Shower"
        end    
    end
    if type then 
        for k,val in pairs(CollectThings[type]) do 
            if val==v then table.remove(CollectThings[type],k) end
        end
    end
end)

function GetSortedCoconut(Field, IsShower)
    local type="Coco"
    if IsShower then 
        type="Shower"
    end
    local coco = {}
    local cac = 1
    if Settings.ShowerTP then cac = 0.5 end
    for k,v in pairs(CollectThings[type]) do 
        if plr.Character:FindFirstChild("HumanoidRootPart") and (v.Position-plr.Character.HumanoidRootPart.Position).magnitude<80
        and v:FindFirstChild("Mesh")
        then
            table.insert(coco,v)
        end
    end
    return coco;
end

function GetNearestBalloon(Field) 
    local nrs 
    for k,v in pairs(game:GetService("Workspace").Balloons.FieldBalloons:GetChildren()) do 
        if v:FindFirstChild("PlayerName") then 
            if v.PlayerName.Value==plr.Name then 
                if v:FindFirstChild("BalloonRoot") then 
                    if IsValidTokenPos(v.BalloonRoot,Field) then
                        if plr.Character:FindFirstChild("HumanoidRootPart") then 
                            if not nrs then 
                                nrs = v
                            end
                            if (plr.Character.HumanoidRootPart.Position-v.BalloonRoot.Position).magnitude<(plr.Character.HumanoidRootPart.Position-nrs.BalloonRoot.Position).magnitude then 
                                nrs = v
                            end
                        end
                    end
                end 
            end
        end
    end
    return nrs
end

function GetMark(Field)
    local dist = math.huge
    local mark
    for k, v in ipairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("Part")
        and v.Name == "AreaRing"
        and getgenv().IsValidTokenPos(v, Field) then
            if ValidFarm()
            and Settings.Farm then
                local magnitude = (v.Position - plr.Character.HumanoidRootPart.Position).magnitude
                if magnitude < dist then
                    dist = magnitude
                    mark = v
                end
            end
        end
    end
    return mark
end

function GetBallon()
    for k, v in ipairs(game.Workspace.Particles:GetChildren()) do
        if v:IsA("Part")
        and v.Name == "AreaRing" then
            if ValidFarm()
            and Settings.Farm then
                return v
            end
        end
    end
end

game.Workspace.Collectibles.ChildAdded:Connect(function(v)
    if v:FindFirstChild("FrontDecal") then 
        
        if Settings.IgnoreHoney then 
            if string.match(v.FrontDecal.Texture,HoneyTokenId) then return end
        end
    end

    local field = GetNerestFieldByObject(v)
    if not ListAllToken[field] then 
        ListAllToken[field]={}
    end
    local Token
    if v:FindFirstChild("FrontDecal") then 
        for k,val in pairs(PrioritizeList) do 
            if PrioritizeListTF[k] then 
                if string.match(v.FrontDecal.Texture,val) then
                    Token=k
                    break; 
                end
            end
            
        end
    end
    if Token then 
        if not ListAllToken[field][Token] then 
            ListAllToken[field][Token]={}
        end
        table.insert(ListAllToken[field][Token],v)     
    else
        if not ListAllToken[field]["None"] then 
            ListAllToken[field]["None"]={}
        end
        table.insert(ListAllToken[field]["None"],v)    
    end
end)

game.Workspace.Collectibles.ChildRemoved:Connect(function(v) 
    local field = GetNerestFieldByObject(v)
    if not ListAllToken[field] then 
        ListAllToken[field]={}
    end
    local index=0
    for k,val in pairs(ListAllToken[field]) do 
        for k,val2 in pairs(val) do 
            if val2==v then 
                table.remove(val,k)
                break;
            end
        end
    end
end)
-- function CountTabT(ListAllToken) 
--     local c = 0
--     for k,val in pairs(ListAllToken) do
--         for k,val in pairs(val) do 
--             for k,val2 in pairs(val) do 
--                 c=c+1
--             end
--         end
--     end
--     return c
-- end

local ks = {}
for k, v in pairs(GetInstantList()) do
    ks[v.Name] = v.Platform.CFrame
end

local ListBuff = {"Blue Extract", "Red Extract", "Oil", "Enzymes", "Glue", "Tropical Drink", "Stinger"}
local ListFieldBoost = {"Red Field Booster", "Blue Field Booster", "Field Booster", "Coconut Dispenser"}
local TFListFieldBoost = ListToOb(ListFieldBoost, false)
TFListFieldBoost["Only enable when theres no boost (Setting)"] = false
local FarmBuffList = {
    ["Blue Extract"] = false,
    ["Red Extract"] = false,
    ["Oil"] = false,
    ["Enzymes"] = false,
    ["Glue"] = false,
    ["Tropical Drink"] = false,
    ["Stinger"] = false
}

if not Settings.FarmBuffList then Settings.FarmBuffList = FarmBuffList else FarmBuffList=Settings.FarmBuffList end
if not Settings.TFListFieldBoost then Settings.TFListFieldBoost = TFListFieldBoost else TFListFieldBoost=Settings.TFListFieldBoost end



local CurrentField = "Sunflower Field"
local Field = CurrentField
local TempField = Field

local LevelFarmVK = vToK(LevelFarm)
local FarmFieldList = ToST(LevelFarmVK,CurrentField)

getgenv().isActiveTokens = function(v)
    if v and v:IsA("Part") then
        return not ((v.Transparency + 0.05) > 0.7 and (v.Transparency - 0.05) < 0.7)
    end
end
local ChangeGlider=false
Settings.Glider="Glider"
local t = require(game:GetService("ReplicatedStorage").Parachutes)
local old = t.Get
t.Get = function(a)
    if Settings.ChangeGlider then
        return old(Settings.Glider)
    end
    return old(a)
end

-- UI LIB --
local Main = Library.CreateMain({Title = 'Bee Swarm Simulator', Desc = ''})

-- local Page1 = Main.CreatePage({Page_Name = 'Secret Feature', Page_Title = 'Main Tab'})
-- local Section11 = Page1.CreateSection('Item')
-- Section11.CreateDropdown({Title = 'Sellect Item', List = TFItemHook, Search = true, Selected = true}, function(i,v)
-- end)
-- Section11.CreateButton({Title = 'Get Inf Item'}, function()

-- end)
-- local Section11 = Page1.CreateSection('Honey')
-- Section11.CreateBox({Title = 'Sellect Amount Honey', Placeholder = 'Type here', Number_Only = true}, function(v)
--     if v then
--         x = tonumber(v)
--     end
-- end)
-- Section11.CreateButton({Title = 'Get Honey'}, function()

-- end)
local Page1 = Main.CreatePage({Page_Name = 'Main', Page_Title = 'Main Tab'})

local Section11 = Page1.CreateSection('Misc')
local sent = false

-- SpawnTable["Stocking"] = function() 
--     while wait(2) do 
--         if Settings.Stocking then 
--             if CheckFarm("Stocking") then 
--                 local pos = Vector3.new(232.93347167969, 35.397228240967, 235.30931091309)
--                 game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer("Stockings")
--                 for k,v in ipairs(game.Workspace.Collectibles:GetChildren()) do 
--                     if getgenv().IsToken(v) then 
--                         if (v.Position-pos).magnitude<25 and CheckFarm("Stocking") then 
--                             ValidTB["Stock"] = true
--                             StopFarmList["Stocking"] = true
--                             wait(.3)
--                             tpT(v.CFrame, 100)
--                         end
--                     end
--                 end
--                 ValidTB["Stock"] = false
--                 StopFarmList["Stocking"] = false
--             end
--         end
--         if Settings.LidArt then 
--             if CheckFarm("Stocking") then 
--                 local pos = game:GetService("Workspace").Toys["Onett's Lid Art"].Platform.Position
--                 game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer("Onett's Lid Art")
--                 for k,v in ipairs(game.Workspace.Collectibles:GetChildren()) do 
--                     if getgenv().IsToken(v) then 
--                         if (v.Position-pos).magnitude<25 and CheckFarm("Stocking") then 
--                             ValidTB["Stock"] = true
--                             StopFarmList["Stocking"] = true
--                             wait(.3)
--                             tpT(v.CFrame, 100)
--                         end
--                     end
--                 end
--                 ValidTB["Stock"] = false
--                 StopFarmList["Stocking"] = false
--             end
--         end
--         if Settings.Samovar then 
--             if CheckFarm("Stocking") then 
--                 local pos = game:GetService("Workspace").Toys.Samovar.Platform.Position
--                 game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer("Samovar")
--                 for k,v in ipairs(game.Workspace.Collectibles:GetChildren()) do 
--                     if getgenv().IsToken(v) then 
--                         if (v.Position-pos).magnitude<25 and CheckFarm("Stocking") then 
--                             ValidTB["Stock"] = true
--                             StopFarmList["Stocking"] = true
--                             wait(.3)
--                             tpT(v.CFrame, 100)
--                         end
--                     end
--                 end
--                 ValidTB["Stock"] = false
--                 StopFarmList["Stocking"] = false
--             end
--         end
--         if Settings.Candle then 
--             game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer("Honeyday Candles")
--             local platformm = game:GetService("Workspace").Toys["Honeyday Candles"].Platform
--             for i,v in pairs(game.Workspace.Collectibles:GetChildren()) do
--                 if (v.Position-platformm.Position).magnitude < 25 and v.CFrame.YVector.Y == 1 then
--                     StopFarmList["Stocking"] = true
--                     tpT(v.CFrame, 100)
--                 end
--             end
--         end
        
--         StopFarmList["Stocking"] = false
--     end
-- end

-- Section11.CreateToggle({Title = 'Auto Stocking', Default = Settings.Stocking}, function(v)
--     Settings.Stocking = v
-- end)
-- Section11.CreateToggle({Title = 'Auto Samovar', Default = Settings.Samovar}, function(v)
--     Settings.Samovar = v
-- end)
-- Section11.CreateToggle({Title = 'Auto Lid Art', Default = Settings.LidArt}, function(v)
--     Settings.LidArt = v
-- end)
-- Section11.CreateToggle({Title = 'Auto Lid Candle', Default = Settings.Candle}, function(v)
--     Settings.Candle = v
-- end)
Section11.CreateToggle({Title = 'Auto Start Metor Shower', Default = Settings.MetorStart}, function(v)
    Settings.MetorStart = v
    spawn(function() 
        while Settings.MetorStart do 
            game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer("Mythic Meteor Shower")
            wait(2)
        end
    end)
end)
Section11.CreateToggle({Title = 'Auto Snow Machine', Default = Settings.SnowStart}, function(v)
    Settings.SnowStart = v
    spawn(function() 
        while Settings.SnowStart do 
            game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer("Snow Machine")
            wait(2)
        end
    end)
end)
Section11.CreateToggle({Title = 'Auto Sprout Summoner', Default = Settings.SproutSummon}, function(v)
    Settings.SproutSummon = v
    spawn(function() 
        while Settings.SproutSummon do 
            game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer("Sprout Summoner")
            wait(2)
        end
    end)
end)
local Badges = {
    "Pepper",
    "Coconut",
    "Playtime",
    "Honey",
    "Quest",
    "Battle",
    "Ability",
    "Goo",
    "Sunflower",
    "Dandelion",
    "Mushroom",
    "Blue Flower",
    "Clover",
    "Spider",
    "Bamboo",
    "Strawberry",
    "Pineapple",
    "Pumpkin",
    "Cactus",
    "Rose",
    "Pine Tree",
    "Stump"
}
function AutoReceiveBadge()
    while Settings.AutoBadge and wait(2) do 
        for i, v in pairs(Badges) do
            game.ReplicatedStorage.Events.BadgeEvent:FireServer("Collect", v)
        end
    end
end
Section11.CreateToggle({Title = 'Auto Receive Badge', Default = Settings.AutoBadge}, function(v)
    Settings.AutoBadge = v
    spawn(function()
        AutoReceiveBadge()
    end)
end)
local Dispensers = {
    "Gingerbread House",
    "Glue Dispenser",
    "Wealth Clock",
    "Strawberry Dispenser",
    "Treat Dispenser",
    "Free Ant Pass Dispenser",
    "Blueberry Dispenser",
    "Honey Dispenser",
    "Free Royal Jelly Dispenser"
}
function AutoUseDispenser()
    while Settings.AutoDispenser and wait(2) do 
        for i, v in pairs(Dispensers) do
            if CheckToyCD(v) then 
                game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer(v)
            end
        end
    end
end
Section11.CreateToggle({Title = 'Auto Use Dispenser', Default = Settings.AutoDispenser}, function(v)
    Settings.AutoDispenser = v
    spawn(function()
        AutoUseDispenser()
    end)
end)
function BringInstantConverter()
    while Settings.BringIns and wait(1) do 
        local x = GetInstantList()
        for k, v in pairs(x) do
            if IsInstantValid(v.Name) and GetCurrenItem("Ticket") > 0 then
                local x = plr.Character:WaitForChild("HumanoidRootPart").Position
                v.Platform.CFrame =
                    CFrame.new(
                    x.X,
                    x.Y - 7,
                    x.Z,
                    2.11000443e-05,
                    0.0596015155,
                    0.998222232,
                    -1,
                    2.11000443e-05,
                    1.9878149e-05,
                    -1.9878149e-05,
                    -0.998222232,
                    0.0596014857
                )
                break
            else
                v.Platform.CFrame = ks[v.Name]
            end
        end
    end
end
Section11.CreateToggle({Title = 'Bring Instant Converter', Default = Settings.BringIns}, function(v)
    Settings.BringIns = v
    if not v then
        for k, v in pairs(GetInstantList()) do
            v.Platform.CFrame = ks[v.Name]
        end
    end
    spawn(function()
        BringInstantConverter()
    end)
end)
function AutoBuyAntPass()
    while Settings.BuyAnt and wait(1) do 
        if GetCurrenItem("AntPass") == 0 and GetCurrenItem("Ticket") >= 10 then
            game.ReplicatedStorage.Events.ToyEvent:FireServer("Ant Pass Dispenser")
        end
    end
end
-- Script generated by TurtleSpy, made by Intrer#0421

Section11.CreateToggle({Title = 'Auto Buy Ant Pass', Desc = 'Auto Buy Ant Pass with Ticket when you have 0 Ant Pass', Default = Settings.BuyAnt}, function(v)
    Settings.BuyAnt = v
    spawn(function()
        AutoBuyAntPass()
    end)
end)
function AutoGumDrop()
    while Settings.ATGumdrop and wait(1) do
        if Settings.GumMode == "Always Enable" or Settings.GumMode==nil then 
            game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = "Gumdrops"})
        else
            if IsBuffOn("Gumdrop") then 
                game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = "Gumdrops"})
            end
        end
        
    end
end
Section11.CreateToggle({Title = 'Auto Gumdrop', Desc = nil, Default = Settings.ATGumdrop}, function(v)
    Settings.ATGumdrop = v
    spawn(function()
        AutoGumDrop()
    end)
end)
Section11.CreateDropdown({Title = 'Auto Gumdrop Mode', List = {"Always Enable","Enable when unlimited gumdrop only"},Default=Settings.GumMode}, function(v)
    Settings.GumMode = v
end)
function AutoPlantMagicBean()
    while Settings.PlantMagic and wait(1) do 
        game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer({["Name"] = "Magic Bean"})
    end
end
Section11.CreateToggle({Title = 'Auto Plant Magic Bean', Default = Settings.PlantMagic}, function(v)
    Settings.PlantMagic = v
    spawn(function()
        AutoPlantMagicBean()
    end)
end)
Section11.CreateToggle({Title = 'Eye All Sprout', Desc = 'Will make all invisible Sprouts visible (Happend when you just joined a server with Sprout)', Default = Settings.Eye}, function(v)
    Settings.Eye = v
    if v then
        spawn(function()
            if plr.PlayerScripts:FindFirstChild("LocalPartsInit") then 
                plr.PlayerScripts.LocalPartsInit:Destroy()
            end
            for _, v in pairs(Folder2:GetChildren()) do
                pcall(function() 
                    if v.Name=="Sprout" then 
                        v.Transparency = 0
                    else
                        v.Transparency = 0.85
                    end
                end)
                if v:FindFirstChild("PointLight") then 
                    v.PointLight.Enabled=true
                end
                if v:FindFirstChild("GuiPos") then 
                    v.GuiPos.Gui.Enabled=true
                end
                if v:FindFirstChild("Sparkles") then 
                    v.Sparkles.Enabled=true
                end
            end
        end)
    end
end)
SpawnTable["Buff"] = function() 
    while wait(2) do
        for k, v in pairs(ListBuff) do
            if Settings.FarmBuffList[v]
            and not IsBuffOn(v) then
                game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = v})
            end
        end
    end
end

Section11.CreateDropdown({Title = 'Auto Use Item', List = Settings.FarmBuffList, Search = true, Selected = true}, function(i, v)
    if i and v then 
        Settings.FarmBuffList[i] = v
    end
end)
SpawnTable["Field Boost"] = function() 
    while wait(3) do
        for k, v in pairs(ListFieldBoost) do
            if TFListFieldBoost[v]
            and not (TFListFieldBoost["Only enable when theres no boost (Setting)"]
            and IsAnyBoost()) and CheckToyCD(v) then
                game:GetService("ReplicatedStorage").Events.ToyEvent:FireServer(v)
                wait(3)
            end
        end
    end
end

Section11.CreateDropdown({Title = 'Auto Use Field Boost', List = TFListFieldBoost, Selected = true}, function(i, v)
    if i and v then 
        TFListFieldBoost[i]=v
    end
end)
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local WindowFocusReleasedFunction = function()
	if Settings.ToggleBoostFPS then
		RunService:Set3dRenderingEnabled(false)
	end
end
local WindowFocusedFunction = function()
	RunService:Set3dRenderingEnabled(true)
end
UserInputService.WindowFocusReleased:Connect(WindowFocusReleasedFunction)
UserInputService.WindowFocused:Connect(WindowFocusedFunction)
Section11.CreateToggle({Title = 'Boost FPS', Default = Settings.ToggleBoostFPS}, function(v)
    Settings.ToggleBoostFPS = v
    spawn(function()
        if v then
            if not getgenv().BoostedFPS then
                getgenv().BoostedFPS = true
                game:GetService("RunService"):Set3dRenderingEnabled(true)
				local Lighting = game:GetService("Lighting")
				local Terrain = workspace:FindFirstChildOfClass("Terrain")
				sethiddenproperty(Terrain, "Decoration", false)
				sethiddenproperty(game.Lighting, "Technology", 0)
				settings().Rendering.QualityLevel = "Level01"
				pcall(function()
					Terrain.WaterWaveSize = 0
					Terrain.WaterWaveSpeed = 0
					Terrain.WaterReflectance = 0
					Terrain.WaterTransparency = 0
				end)
				for i, v in pairs(Lighting:GetDescendants()) do
					if v:IsA("BlurEffect")
					or v:IsA("SunRaysEffect")
					or v:IsA("BloomEffect")
					or v:IsA("DepthOfFieldEffect") then
						v.Enabled = false
					end
				end
				wait(1)
				for i, v in pairs(workspace:GetDescendants()) do
					if v:IsA("Part")
					or v:IsA("SpawnLocation")
					or v:IsA("WedgePart")
					or v:IsA("Terrain")
					or v:IsA("UnionOperation")
					or v:IsA("CornerWedgePart")
					or v:IsA("TrussPart") then
						v.Material = "Plastic"
						v.Reflectance = 0
					elseif v:IsA("MeshPart") then
						v.Material = "Plastic"
						v.Reflectance = 0
						v.TextureID = ""
					elseif v.ClassName == "Decal"
					or v.ClassName == "Texture" then
						v.Transparency = 1
					elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
						v.Lifetime = NumberRange.new(0)
					elseif v:IsA("Explosion") then
						v.BlastPressure = 1
						v.BlastRadius = 1
					end
				end
            end
        end
    end)
end)
function GetSnowflakeEff()
    local dist = math.huge
    local m = nil
    for _,v in pairs(game.Workspace.Particles.Snowflakes:GetChildren()) do
        if not v:FindFirstChild("Ignored") then
            local magnitude = (v.Position - plr.Character.HumanoidRootPart.Position).magnitude
            if magnitude < dist then
                dist = magnitude
                m = v
            end
        end
    end
    return m
end
function GetSnowflake()
    for _,v in pairs(game.workspace.Collectibles:GetChildren()) do
        if v:FindFirstChild("FrontDecal")
        and not v:FindFirstChild("Ignored") 
        and v.FrontDecal.Texture == "rbxassetid://6087969886"
        and (v.Position - plr.Character.HumanoidRootPart.Position).magnitude < 30 then
            return v
        end
    end
end
ignored = {game:GetService("Workspace").FlowerZones}
function Autoflake()
    while Settings.AutoSnowflake and wait() do 
        local v = GetSnowflakeEff()
        if v then
            StopFarmList["Snowflake"] = true
            local vP = v.Position
            tpT(CFrame.new(vP.X, vP.Y - 10, vP.Z), 75)
            repeat wait()
            until not v.Parent
            and not GetSnowflake()
            or not Settings.AutoSnowflake
            local ractvk = Instance.new("IntValue", v)
            ractvk.Name = "Ignored"
            wait(.5)
        else
            StopFarmList["Snowflake"] = false
        end
    end
    StopFarmList["Snowflake"] = false
end
Section11.CreateToggle({Title = 'Auto Snowflake', Default = Settings.AutoSnowflake}, function(v)
    Settings.AutoSnowflake=v
    spawn(function()
        Autoflake()
    end)
end)
local Section12 = Page1.CreateSection('Auto Blender')
local Sel = -1;
local CraftItem = ""
local CraftAmmount = 0
local AutoCraft = false
local ListCraft = {"RedExtract", "BlueExtract", "Enzymes", "Oil", "Glue", "TropicalDrink", "Gumdrops", "MoonCharm", "Glitter", "StarJelly", "PurplePotion", "SuperSmoothie"}
local tb = {}
local tbk = {}
local todolist = Section12.CreateDropdown({Title = 'Todo List', List = tbk}, function(v,k)
    Sel = k
end)
Section12.CreateDropdown({Title = 'Select Item To Craft', List = ListCraft, Search = true}, function(v)
    CraftItem = v
end)
Section12.CreateBox({Title = 'Craft Amount', Placeholder = 'Input amount of item you want to craft (number)', Number_Only = true}, function(v)
    if v then
        CraftAmmount = tonumber(v)
    end
end)
Section12.CreateButton({Title = 'Add to list'}, function()
    if CraftAmmount
    and CraftAmmount > 0
    and CraftItem ~= ""
    and CraftItem then 
        table.insert(tb, {
            Item = CraftItem,
            Amount = CraftAmmount
        })
        table.insert(tbk,"x"..CraftAmmount.." "..CraftItem)
        local list = {}
        todolist.rf()
    end
end)
Section12.CreateButton({Title = 'Remove Selected From List'}, function()
   table.remove(tbk,Sel)
   table.remove(tb,Sel)
   todolist.rf()
end)
Section12.CreateToggle({Title = 'Auto Blender', Default = Settings.AutoCraft}, function(v)
    if v then 
        game:GetService("ReplicatedStorage").Events.BlenderCommand:InvokeServer("StopOrder")
    end
    Settings.AutoCraft = v
end)
local lb = Section12.CreateLabel({Title = "Crafting Status:"})
SpawnTable["Craft"] = function() 
    while wait(1) do
        local t, b = GetCraftingStatus()
        if t == 0 then 
            lb.SetText("Blender Status: Crafting nil")
            if Settings.AutoCraft then
                if #tb > 0 then 
                    game:GetService("ReplicatedStorage").Events.BlenderCommand:InvokeServer("PlaceOrder",{["Recipe"] = tb[1].Item,["Count"] = tb[1].Amount})                 
                end
            end 
        end
        if t == 2 then 
            lb.SetText("Blender Status: Crafting x"..b.Count.." "..b.Recipe)
        end
        if t == 1 then 
            lb.SetText("Blender Status: Crafted x"..b.Count.." "..b.Recipe)
            if Settings.AutoCraft then 
                wait(.5)
                game:GetService("ReplicatedStorage").Events.BlenderCommand:InvokeServer("StopOrder")
                wait(.5)
                if #tb > 0 then 
                    table.remove(tb, 1)
                    table.remove(tbk, 1)
                end
            end
        end
    end
end



local Section13 = Page1.CreateSection('Auto Donate')
Section13.CreateDropdown({Title = 'Select Item', List = ItemDonateList, Search = true}, function(v)
    if not v then
        return
    end
    DonateItem = tostring(v)
end)
Section13.CreateBox({Title = 'Amount', Placeholder = 'Input amount of item you want to donate (number)', Number_Only = true}, function(v)
    if v then
       DonateAmount = tonumber(v)
    end
end)
function AutoDonate()
    while Settings.AutoDonate and wait() do 
        if CheckFarm("Donate") then 
            game.ReplicatedStorage.Events.WindShrineDonation:InvokeServer(DonateItem, DonateAmount)
            game.ReplicatedStorage.Events.WindShrineTrigger:FireServer()
            for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                if getgenv().IsToken(v) then
                    local win = game:GetService("Workspace").NPCs["Wind Shrine"].Platform
                    if (win.Position - v.Position).magnitude < 30 and CheckFarm("Donate") then
                        StopFarmList["Donate"] = true
                        wait(.5)
                        tpT(v.CFrame)
                    
                    end
                end
            end
            wait(3)
            StopFarmList["Donate"] = false

        end
        
    end
end


Section13.CreateToggle({Title = 'Auto Donate', Default = Settings.AutoDonate}, function(v)
    Settings.AutoDonate = v
    spawn(function()
        AutoDonate()
    end)
end)

local Section13 = Page1.CreateSection('Memory Match')
function MemoryMatchCheat()
    while Settings.memo and wait(1) do 
        for i, v in pairs(plr.PlayerGui.ScreenGui:WaitForChild("MinigameLayer"):GetChildren()) do
            for k, q in pairs(v:WaitForChild("GuiGrid"):GetDescendants()) do
                if q.Name == "ObjContent" or q.Name == "ObjImage" then
                    q.Visible = true
                end
            end
        end
    end
end
Section13.CreateToggle({Title = 'Memory Match Cheat', Default = Settings.memo}, function(v)
    Settings.memo = v
    spawn(function()
        MemoryMatchCheat()
    end)
end)
Section13.CreateDropdown({Title = 'Memory Match List', List = MemoTF, Search = false,Selected=true}, function(k,v)
    if k and v~=nil then 
        MemoTF[k]=v
    end
end)
Section13.CreateToggle({Title = 'Auto Memory Match', Default = Settings.AutoMem}, function(v)
    Settings.AutoMem = v
    -- spawn(function()
    --     AutoDonate()
    -- end)
end)

-- Client Listener
local MemoryMatchHash = {}
local MemoryMatchEventListen = {}
game:GetService("ReplicatedStorage").Events.MemoryMatchEvent.OnClientEvent:Connect(function(a) 
    if a.Action == "RevealTile" then 
        table.insert(MemoryMatchEventListen,a)
    end
    
end)
function PlayMatch(slot) 
    --print("banoi")
    if pcall(function() return slot.StageGrow.StagePop.StageFlip.ObjCard.ObjButton end) and pcall(function() return slot.StageGrow.StagePop.StageFlip.ObjCard.ObjContent.GuiTile.StageGrow.StagePop.StageFlip.ObjCard.ObjButton end) then 
        --print("Tvk")
        local bocon = slot.StageGrow.StagePop.StageFlip.ObjCard.ObjContent.GuiTile.StageGrow.StagePop.StageFlip.ObjCard.ObjButton
        local bome = slot.StageGrow.StagePop.StageFlip.ObjCard.ObjButton
        --print("cc2")
        for k,v in pairs(getconnections(bome.Activated)) do 
            if v.Function then 
                warpF2(v.Function)
            end
        end
         for k,v in pairs(getconnections(bocon.Activated)) do 
             --v:Fire()
            if v.Function then 
                warpF2(v.Function)
            end
         end
    end
end
function PlayMatchWait(slot,cac,dit) 
    local ui = plr.PlayerGui.ScreenGui:FindFirstChild("MinigameLayer")
    if ui then 
        if ui:FindFirstChild("MemoryMatchFrame") then 
            local CurrentTabS = #MemoryMatchEventListen
            repeat wait() PlayMatch(slot) until #MemoryMatchEventListen ~=CurrentTabS or not cac.Parent or dit.Visible==false
            return MemoryMatchEventListen[#MemoryMatchEventListen]
        end
    end
    
end
local a = require(game.ReplicatedStorage.Activatables.Toys)

local check1 = debug.getupvalue(a.ButtonEffect,1)
local check2 = debug.getupvalue(a.ButtonEffect,2)
function CheckToy(toy) 
    return check1(a,toy) and check2(a,toy)   
end

--print(a.Search(game.Players.LocalPlayer))
spawn(function() 
    while wait(1) do 
        if Settings.AutoMem then
            

            MemoryMatchHash={}
            MemoryMatchEventListen={}
            -- local ui = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.MinigameLayer:FindFirstChild("MemoryMatchFrame")
            -- if ui then 
            --     if ui:FindFirstChild("GuiGrid") then 
                    
            --     end
            -- end

            --a=game:GetService("Players").huynoodngu.PlayerGui.ScreenGui.MinigameLayer
            local memgui
            local ui = plr.PlayerGui.ScreenGui:FindFirstChild("MinigameLayer")
            if ui and ui:FindFirstChild("MemoryMatchFrame") and ui.MemoryMatchFrame:FindFirstChild("GuiGrid") then
                if ui.MemoryMatchFrame.GuiGrid:FindFirstChild("GuiGrid") then 
                    for k,v in pairs(ui.MemoryMatchFrame.GuiGrid:GetChildren()) do 
                        if #v:GetChildren()>0 and v.Name=="GuiGrid" then
                            memgui=v 
                            break
                        end
                    end
                end
            end
            if memgui then 
                local memchild = memgui:GetChildren()
                local i = 1
                local memframe =ui:FindFirstChild("MemoryMatchFrame")
                while i<=#memchild and  memframe and memframe.Parent and ui.Visible do 
                    if memframe.Parent then 
                        local v = memchild[i]
                        print(v)
                        if v then 
                            wait(1)
                            local CurrentTabS = #MemoryMatchEventListen
                            local a = PlayMatchWait(v,memframe,ui)
                            if memframe.Parent and ui.Visible then 
                                if MemoryMatchHash[a.TileType] then 
                                    --wait(2)
                                    PlayMatch(MemoryMatchHash[a.TileType].Obj)
                                    print("Found",a.TileIndex,MemoryMatchHash[a.TileType].Cac.TileIndex)
                                    i=i+1
                                    MemoryMatchHash[a.TileType]=nil
                                else
                                    local tiep = memchild[i+1]
                                    if tiep then 
                                        --wait(2)
                                        local a1 = PlayMatchWait(tiep,memframe,ui)
                                        if memframe.Parent and ui.Visible then 
                                            if MemoryMatchHash[a1.TileType] then 
                                                wait(2)
                                                PlayMatch(tiep)
                                                PlayMatch(MemoryMatchHash[a1.TileType].Obj)
                                                MemoryMatchHash[a1.TileType]=nil
                                            else
                                                MemoryMatchHash[a1.TileType] = {Obj = tiep,Cac = a1}
                                            end
                                            -- if MemoryMatchHash[a.TileType] then 
                                            --     PlayMatch(tiep)
                                            --     PlayMatch(MemoryMatchHash[a.TileType].Obj)
                                            --     MemoryMatchHash[a.TileType]=nil
                                            -- end
                                            MemoryMatchHash[a.TileType] = {Obj = v,Cac = a}
                                        end
                                    end
                                    i=i+2
                                end   
                            end
                               
                        end
                    end
                    
                end
                if memframe.Parent then memframe:Destroy() end
                --print("Cac dit vai lon")
                i=1
            else
                for k,v in pairs(MemoTF) do 
                    if v then 
                        local done=false
                        warpF2(function() 
                            local a = game:GetService("Workspace").Toys[k]
                            if not CheckToy(a) then return end
                            done=true
                            require(game.ReplicatedStorage.Activatables.Toys):ButtonEffect(a)
                           -- local b = require(a.ClientEffect)
                            --b()
                        end)
                        if done then break end
                    end
                end
            end
            -- local Size = 24
            -- local i = 1
            -- while i<Size/2 do 
            --     wait(1)
            --     local CurrentTabS = #MemoryMatchEventListen
            --     local a = PlayMatch(i)
            --     if MemoryMatchHash[a.TileType] then 
            --         game:GetService("ReplicatedStorage").Events.MemoryMatchEvent:FireServer({["Action"] = "SelectTile",["TileIndex"] = MemoryMatchHash[a.TileType].TileIndex})
            --         print("Found",a.TileIndex,MemoryMatchHash[a.TileType].TileIndex)
            --         i=i+1
            --     else
            --         local a1 = PlayMatch(i+1)
            --         MemoryMatchHash[a1.TileType] = a1
            --         MemoryMatchHash[a.TileType] = a
            --         i=i+2
            --     end
                
            -- end
        end
    end
end)
local Section14 = Page1.CreateSection('Remote')
Section14.CreateButton({Title = 'Start Free Stick Bug'}, function()
    game.ReplicatedStorage.Events.SelectNPCOption:FireServer("StartFreeStickBugEvent")
end)
Section14.CreateButton({Title = 'Start Paid Stick Bug'}, function()
    game.ReplicatedStorage.Events.SelectNPCOption:FireServer("StartPaidStickBugEvent")
end)
local Section14 = Page1.CreateSection('Secure Check')
Section14.CreateButton({Title = 'Check CSKC'}, function()
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    local data = StatCache.Get()
    local CSKC = tostring(data.ServerSide.AntiCheat.CollectibleKicks)
    Library.CreateNoti({
        Title = nil,
        Desc = 'Your Cheat Service Kick Counter: '..CSKC,
        ShowTime = 5,
    })
end)
Section14.CreateButton({Title = 'Check Shadow Ban'}, function()
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    local data = StatCache.Get()
    if data.Eggs.CheaterFlag or table.find(data.ServerSide.Flags,"ResetForTeamChosenExploit") then 
        Library.CreateNoti({
            Title = nil,
            Desc = 'Your account has been shadow banned',
            ShowTime = 5,
        })
    else
        Library.CreateNoti({
            Title = nil,
            Desc = 'Your account is safe',
            ShowTime = 5,
        })
    end
end)

Section14.CreateButton({Title = 'Check Windy Favor'}, function()
    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
    local data = StatCache.Get()
    local cac = math.round(data.WindShrine.WindyFavor)
    Library.CreateNoti({
        Title = nil,
        Desc = 'Your Windy Favor: '..formatNumber(tostring(cac)),
        ShowTime = 5,
    })
end)

-- function Request() 
--     syn.request({
--         Url = "http://127.0.0.1:8080/",
--         Body = game.HttpService:JSONEncode({
--             Key = "Dit me cuoc doi"
--         })
--     })
-- end 
-- Request()
-- local Section14 = Page1.CreateSection('Auto Rejoin')

-- Section14.CreateToggle({Title = "Auto Rejoin", Default = Settings.ToggleAutoRejoin, Desc = 'Will auto rejoin if got kicked'}, function(v)
-- 	Settings.ToggleAutoRejoin = v
-- end)
-- Section14.CreateToggle({Title = "Use Private Server", Default = Settings.UsePS, Desc = 'Will Rejoin to private server (Need sea hub client open)'}, function(v)
-- 	Settings.UsePS = v
-- end)
-- Section14.CreateButton({Title = 'Check connection to Sea Hub Client'}, function()
--     Library.CreateNoti({
--         Title = nil,
--         Desc = 'Finding Sea Hub Client',
--         ShowTime = 5,
--     })
--     local a = syn.request({
--         Url = "http://localhost:25121/",
--         Body = game.HttpService:JSONEncode({
--             Key = "Test"
--         }),
--         Method="POST"
--     })
--     if a.Success then 
--         Library.CreateNoti({
--             Title = nil,
--             Desc = 'Sea Hub Client Found',
--             ShowTime = 5,
--         })
--     else
--         Library.CreateNoti({
--             Title = nil,
--             Desc = 'Sea Hub Client Not Found',
--             ShowTime = 5,
--         })
--     end
-- end)

-- Section14.CreateBox({Title = 'Enter Cookie', Placeholder = 'Type here', Number_Only = false,Default=Settings.Cookie}, function(v)
--     if v then
--        Settings.Cookie = v
--     end
-- end)
-- function IsCookieValid(cookie) 
--     if not cookie or cookie=="" then 
--         Library.CreateNoti({
--             Title = nil,
--             Desc = 'Invalid Cookie',
--             ShowTime = 5,
--         })
--         return
--     end
--     local a = syn.request({
--         Url = "http://localhost:25121/",
--         Body = game.HttpService:JSONEncode({
--             Key = "CheckC",
--             Cookie = cookie
--         }),
--         Method="POST"
--     })
--     if a.Success then 
--         if a.Body =="ok" then 
--             Library.CreateNoti({
--                 Title = nil,
--                 Desc = 'Valid Cookie',
--                 ShowTime = 5,
--             })
--         else
--             Library.CreateNoti({
--                 Title = nil,
--                 Desc = 'Invalid Cookie',
--                 ShowTime = 5,
--             })
--         end
--     else
--         Library.CreateNoti({
--             Title = nil,
--             Desc = 'Sea Hub Client Not Found',
--             ShowTime = 5,
--         })
--     end
-- end
-- Section14.CreateButton({Title = 'Check Cookie Valid'}, function()
--     IsCookieValid(Settings.Cookie)
-- end)
-- Section14.CreateBox({Title = 'Enter PS Link', Placeholder = 'Type here', Number_Only = false,Default=Settings.PSL}, function(v)
--     if v then
--         Settings.PSL=v
--     end
-- end)
-- local rejoined=false
-- local rejoined2=false
-- function RejoinPS(a) 
--     if not rejoined2 and not rejoined and Settings.PSL and Settings.Cookie then 
--         rejoined2=a
--         local a = syn.request({
--             Url = "http://localhost:25121/",
--             Body = game.HttpService:JSONEncode({
--                 Key = "Join",
--                 PlaceId = game.PlaceId,
--                 PS = Settings.PSL,
--                 Cookie=Settings.Cookie
--             }),
--             Method="POST"
--         })
--         print(a.Body)
--         if a.Success then
--             if a.Body=="Success" then
--                 rejoined=true 
--                 game:Shutdown()
--             else
--                 Library.CreateNoti({
--                     Title = nil,
--                     Desc = tostring(a.Body),
--                     ShowTime = 5,
--                 })
--             end
--         end
--     end
-- end
-- Section14.CreateButton({Title = 'Test Rejoin'}, function()
--     RejoinPS()
-- end)


game.CoreGui.DescendantAdded:Connect(function()
	wait(2)
	pcall(function()
		if game.CoreGui.RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt") then
            pcall(function() 
                if Settings.WebHookKick and not sent then 
                    sent=true
                    SendHookCT({
                        {
                            name = "Name",
                            value = "||"..plr.Name.."||"
                        },
                        {
                            name = "Message",
                            value = "Player Has Been Kicked/Disconnected"
                        }
                    })
                end
                
            end)
            if Settings.ToggleAutoRejoin then
                if not Settings.UsePS then 
                    while wait(1) do
                        game:GetService("TeleportService"):Teleport(game.PlaceId, plr)
                        wait(5)
                    end
                else
                    RejoinPS(true)
                end 
                
            end
			
		end
	end)
end)



local Page2 = Main.CreatePage({Page_Name = 'Farm', Page_Title = 'Farm Tab'})

local Section21 = Page2.CreateSection('Farm Settings')
local FieldList = {} 
for i, v in pairs(GetListField()) do
    if v ~= "Sea Hub Winning Field" then
        table.insert(FieldList, v)
    end
end
Section21.CreateDropdown({Title = 'Select Field', List = FieldList, Search = true, Default = Settings.CurrentField}, function(v)
    if v then 
        FarmFieldList["CurrentField"] = v
        Settings.CurrentField = v
    end
end)
Section21.CreateToggle({Title = 'Disable Hive Convert Honey', Desc = 'Will not goto Hive and convert honey', Default = Settings.DisableConvert}, function(v)
    Settings.DisableConvert = v
end)
Section21.CreateSlider({Title = "Convert at % Backpack", Min = 0, Max = 100, Default = Settings.ConvertAt or 100, Precise = true}, function(v)
    Settings.ConvertAt = v
end)
Section21.CreateToggle({Title = 'Auto Convert Ballon', Default = Settings.ConvertBallon}, function(v)
    Settings.ConvertBallon = v
end)
Section21.CreateSlider({Title = "Convert at x Blessing", Min = 0, Max = 200, Default = Settings.ConvertAtB or 0, Precise = true}, function(v)
    Settings.ConvertAtB = v
end)
Section21.CreateToggle({Title = 'Equip Honey Mask When Sell', Desc = nil, Default = Settings.EquipHoneySell}, function(v)
    Settings.EquipHoneySell = v
end)
Section21.CreateSlider({Title = "Stay In Field When Full (second)", Min = 0, Max = 20, Default = Settings.StayField or 0, Precise = false}, function(v)
    Settings.StayField = v
end)
Section21.CreateToggle({Title = 'Ignore Honey Token', Default = Settings.IgnoreHoney}, function(v)
    Settings.IgnoreHoney = v
end)

local Section22 = Page2.CreateSection('Farm')
Section22.CreateToggle({Title = 'Auto Farm', Default = Settings.Farm}, function(v)
    Settings.Farm = v
    Settings.TempField = Field
end)
function AutoDig()
	while Settings.AutoDig and wait(.05) do 
		Dig()
	end
end
Section22.CreateToggle({Title = 'Auto Dig', Desc = 'Modded Auto Dig (Faster Dig), recommended enable', Default = Settings.AutoDig}, function(v)
    Settings.AutoDig = v
    spawn(function()
        AutoDig()
    end)
end)
Section22.CreateToggle({Title = 'Tide Face', Desc = 'Will adjust best face direction for Tide Popper waves', Default = Settings.TideFace}, function(v)
    Settings.TideFace = v
end)
Section22.CreateToggle({Title = 'Fire Face', Desc = 'Will face to nearest fire', Default = Settings.FireFace}, function(v)
    Settings.FireFace = v
end)
Section22.CreateToggle({Title = 'Farm Sprout', Desc = 'Will farm Sprout spawned on any field', Default = Settings.AutoSprout}, function(v)
    Settings.AutoSprout = v
end)
Section22.CreateToggle({Title = 'Farm Guiding Field', Desc = ' Will Farm the field that have Guiding Star on', Default = Settings.AutoFarmGuiding}, function(v)
    Settings.AutoFarmGuiding = v
end)
Section22.CreateToggle({Title = 'Farm Field Boost', Desc = ' Will Farm the field you have boost on', Default = Settings.AutoFarmBoost}, function(v)
    Settings.AutoFarmBoost = v
end)
Section22.CreateToggle({Title = 'Collect Bubble', Default = Settings.CollectBubble}, function(v)
    Settings.CollectBubble = v
end)
Section22.CreateToggle({Title = 'Bubble Bloat Collector', Desc = "When Bubble Bloat Passive is activated, it will focus on collect bubbles", Default = Settings.BubbleBloat}, function(v)
    Settings.BubbleBloat = v
end)
Section22.CreateToggle({Title = 'Gather Flame', Default = Settings.GatherFlame}, function(v)
    Settings.GatherFlame = v
end)
Section22.CreateToggle({Title = 'Smart Triangulate', Default = Settings.SmartTr}, function(v)
    Settings.SmartTr = v
end)
Section22.CreateToggle({Title = 'Walk To Mark', Desc = "Will walk to Pollen Marks when no tokens detected", Default = Settings.WalkToMark}, function(v)
    Settings.WalkToMark = v
end)
Section22.CreateToggle({Title = 'Walk To Balloon', Desc = "Will walk to Balloon when no tokens detected", Default = Settings.WalkToBalloon}, function(v)
    Settings.WalkToBalloon = v
end)
Section22.CreateToggle({Title = 'Catch Coconut', Default = Settings.CollectCoco}, function(v)
    Settings.CollectCoco = v
end)
Section22.CreateToggle({Title = 'Catch Beemas Light', Default = Settings.CollectLight}, function(v)
    Settings.CollectLight = v
end)
Section22.CreateToggle({Title = 'Catch CrossHair', Default = Settings.CrossHair}, function(v)
    Settings.CrossHair = v
end)
Section22.CreateSlider({Title = "Stand in crosshair at % Backpack", Min = 0, Max = 100, Default = Settings.CrossHairStand or 80, Precise = false}, function(v)
    Settings.CrossHairStand = v
end)
function StopMoreOne() 
    while Settings.StopMoreOne do 
        wait()
        StopFarmList["StopMoreOne"] = #(game.Players:GetChildren()) >1
    end
    StopFarmList["StopMoreOne"] = false
end
Section22.CreateToggle({Title = 'Break when have Players', Desc = 'Will stop farm when server have more than 1 player', Default = Settings.StopMoreOne}, function(v)
    Settings.StopMoreOne=v
    spawn(function() 
        StopMoreOne()
    end)
    if not v then 
        StopFarmList["StopMoreOne"] = false
    end
end)


local puffpart
if not game.Workspace.FlowerZones:FindFirstChild("PuffField") then 
    puffpart = Instance.new("Part", game.Workspace.FlowerZones)
    puffpart.Anchored=true
    puffpart.CanCollide=false
    puffpart.Transparency=1
    puffpart.Name="PuffField"
    puffpart.CFrame=CFrame.new(10000,1000,1000)
    local Range = Instance.new("IntValue", puffpart)
    Range.Name="Range"
    Range.Value = 20
else
    puffpart = game.Workspace.FlowerZones:FindFirstChild("PuffField")
end
SpawnTable["Puffroom"] = function() 
    while wait(.3) do 
        if Settings.Pushroom then 
            if (#game:GetService("Workspace").Happenings.Puffshrooms:GetChildren()) == 0 then 
                FarmFieldList["Pushroom"] = FarmFieldList[LevelFarm[LevelFarmVK["Pushroom"]-1]]     
            else
                local v = GetNearestPushroom()
                local loncac = true
                if v then 
                    if v:FindFirstChild("Puffball Stem")
                    and Settings.Pushroom then 
                        local Curr = GetNerestFieldByObject(v["Puffball Stem"])
                        local cc = v 
                        repeat wait(1) 
                            if v:FindFirstChild("Puffball Stem")
                            and plr.Character:FindFirstChild("HumanoidRootPart") then 
                               

                                -- FieldFarmPos[Curr] = {
                                --              List = {v["Puffball Stem"].CFrame},
                                --              Range = 20,
                                --              WalkRd = 1
                                --     }
                                puffpart.CFrame = v["Puffball Stem"].CFrame
                                FarmFieldList["Pushroom"] ="PuffField"
                            end
                        until not v.Parent
                        or not v:FindFirstChild("Puffball Stem")
                        or not Settings.Pushroom or (function() 
                            if Settings.IgnorePuff then 
                                if GetNearestPushroom()~=cc then loncac=false return true end
                            end
                        end)
                        if Settings.Pushroom and loncac then
                            wait(3)
                        end
                        FieldFarmPos[Curr] = nil
                    end
                else
                    FarmFieldList["Pushroom"] = FarmFieldList[LevelFarm[LevelFarmVK["Pushroom"]-1]]    
                end
            end
            
        else
            FarmFieldList["Pushroom"] = FarmFieldList[LevelFarm[LevelFarmVK["Pushroom"]-1]]
        end
    end
end

loadstring([[
    function GetLeaves(tvk)
        local dist = math.huge
        local m = nil
        local rac = "LeafBurst"
        if tvk then rac = "Sparkles" end
        for _,v in ipairs(game.Workspace.Flowers:GetChildren()) do
            if v:FindFirstChild(rac)
            and not v:FindFirstChild("Ignored") then
                local magnitude = (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
                if magnitude < dist then
                    dist = magnitude
                    m = v
                end
            end
        end
        return m
    end
]])()
SpawnTable["Leave"] = function() 
    while wait(1) do 
        if Settings.AutoFarmLeaves then 
            if CheckFarm("Leaf") then 
                local v = GetLeaves()
                if v then
                    StopFarmList["Leaf"] = true
                    tpT(v.CFrame, 100)
                    wait(.5)
                    Dig()
                    wait(.5)
                    ValidLeaf = true
                    StopFarmList["Leaf"] = false
                    local ractvk = Instance.new("IntValue", v)
                    ractvk.Name = "Ignored"
                else
                    StopFarmList["Leaf"] = false
                end
                
            end
        end
        if Settings.AutoFarmSparkles then 
            if CheckFarm("Leaf") then 
                local v = GetLeaves(true)
                if v then
                    StopFarmList["Leaf"] = true
                    tpT(v.CFrame, 100)
                    wait(.5)
                    Dig()
                    wait(.5)
                    ValidLeaf = true
                    StopFarmList["Leaf"] = false
                    local ractvk = Instance.new("IntValue", v)
                    ractvk.Name = "Ignored"
                    for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                        if
                           (v.Position-plr.Character.HumanoidRootPart.Position).magnitude <20
                         then
                            Walkk(
                                CFrame.new(
                                    v.Position.X,
                                    plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                    v.Position.Z
                                )
                            )
                        end
                    end
                else
                    StopFarmList["Leaf"] = false
                end
            end
        end
        StopFarmList["Leaf"] = false
    end
end


Section11.CreateToggle({Title = 'Auto Farm Leaves', Default = Settings.AutoFarmLeaves}, function(v)
    Settings.AutoFarmLeaves = v
end)
Section11.CreateToggle({Title = 'Auto Farm Sparkles', Default = Settings.AutoFarmSparkles}, function(v)
    Settings.AutoFarmSparkles = v
end)

Section22.CreateToggle({Title = 'Avoid Mob', Desc = "Spam Jump when you near a mob", Default = Settings.AvoidMob}, function(v)
    Settings.AvoidMob = v
end)


Section23 = Page2.CreateSection('Convert Toys')
Section23.CreateToggle({Title = 'Auto use Micro Converter', Default = Settings.AutoMicro}, function(v)
    Settings.AutoMicro = v
end)
Section23.CreateToggle({Title = 'Auto use Instant Converter', Default = Settings.AutoInstant}, function(v)
    Settings.AutoInstant = v
end)
Section23.CreateToggle({Title = 'Auto use Ant Pass', Desc = 'Ant Pass also instant convert your honey', Default = Settings.AutoAntPass}, function(v)
    Settings.AutoAntPass = v
end)
-- Section24 = Page2.CreateSection('Auto Farm Winds Boost')
-- Section24.CreateToggle({Title = 'Auto Farm Winds Boost', Default = Settings.AutoWFB}, function(v)
--     Settings.AutoWFB = v
-- end)
-- Section24.CreateDropdown({Title = 'Allow Color', List = ColorLTF, Selected = true}, function(k,v)
--     if k and v then 
--        -- if k=="Other NPC (Not fully supported)"
--        ColorLTF[k]=v
--     end
-- end)
-- Section24.CreateDropdown({Title = 'Color Priority', List = ColorLTF, Selected = true}, function(k,v)
--     if k and v then 
--        -- if k=="Other NPC (Not fully supported)"
--        ColorLTF[k]=v
--     end
-- end)
Section24 = Page2.CreateSection('Auto Quest')
Section24.CreateToggle({Title = 'Auto Farm Quest', Default = Settings.AutoQ}, function(v)
    Settings.AutoQ = v
end)
Section24.CreateToggle({Title = 'Auto Accept Quest', Default = Settings.AutoQuest}, function(v)
    Settings.AutoQuest = v
end)

Section24.CreateToggle({Title = 'Ignore Honey Bee Quest', Default = Settings.IgnoreHoneyBee}, function(v)
    Settings.IgnoreHoneyBee = v
end)
Section24.CreateDropdown({Title = 'Quest List', List = QuestTF, Selected = true}, function(k,v)
    if k and v then 
       -- if k=="Other NPC (Not fully supported)"
        QuestTF[k]=v
    end
end)
Section24.CreateToggle({Title = 'Auto Go Ant Challenge when rage token quest', Default = Settings.RageAnt}, function(v)
    Settings.RageAnt = v
end)
Section24.CreateToggle({Title = 'Auto Go Kill Snail when rage token quest', Default = Settings.RageSnail}, function(v)
    Settings.RageSnail = v
end)
Section24.CreateToggle({Title = 'Auto drop Gumdrop on Goo Quest', Default = Settings.DropGumGoo}, function(v)
    Settings.DropGumGoo = v
end)

local Page2 = Main.CreatePage({Page_Name = 'Puffroom', Page_Title = 'Puffroom'})

local Section22 = Page2.CreateSection('Auto Puffroom Settings')
Section22.CreateDropdown({Title = "Puffroom Priority Level Method", List = {"Priority High Level","Priority Low Level"}, Search = true,Default="Priority High Level"}, function(v)
    if not v then
        return
    end
    Settings.LevelMethod = v
end)
Section22.CreateDropdown({Title = "Puffroom Priority Raity Method", List = {"Mythic > Normal","Normal > Mythic"}, Search = true,Default="Mythic > Normal"}, function(v)
    if not v then
        return
    end
    Settings.PuffRMethod = v
end)
-- Section22.CreateDropdown({Title = "Puffroom Priority Method", List = {
--     "Raity -> Level -> Field",
--     "Level -> Raity -> Field",
--     "Field -> Raity -> Level",
--     "Field -> Level -> Raity",
-- }, Search = true,Default="Raity -> Level -> Field"}, function(v)
--     if not v then
--         return
--     end
-- end)

Section22.CreateDropdown({Title = 'Allow Puffroom raity', List = PuffRaityTF, Selected = true}, function(k,v)
    if k and v then 
       -- if k=="Other NPC (Not fully supported)"
       PuffRaityTF[k]=v
    end
end)
Section22.CreateDropdown({Title = 'Puffroom Priority raity', List = TPuffRaityTF, Selected = true}, function(k,v)
    if k and v then 
       -- if k=="Other NPC (Not fully supported)"
       TPuffRaityTF[k]=v
    end
end)
Section22.CreateDropdown({Title = 'Allow Puffroom Field', List = PFieldTF, Selected = true}, function(k,v)
    if k and v then 
       -- if k=="Other NPC (Not fully supported)"
       PFieldTF[k]=v
    end
end)

Section22.CreateSlider({Title = 'Min Puffroom Level', Min = 1, Max = 25, Default = Settings.MinPuff or 1}, function(v)
    if v then 
        Settings.MinPuff = v
    end
end)
Section22.CreateSlider({Title = 'Max Puffroom Level', Min = 1, Max = 25, Default = Settings.MaxPuff or 25}, function(v)
    if v then 
        Settings.MaxPuff = v
    end
end)
Section22.CreateToggle({Title = 'Ignore Current Puffroom', Desc = 'Will stop farming current puffroom if higher priority puffroom is detected', Default = Settings.IgnorePuff}, function(v)
    Settings.IgnorePuff = v
end)
local PuffField = {}
if not Settings.PuffField then 
    Settings.PuffField = PuffField
else
    PuffField=Settings.PuffField
end
local function CreateBtnP(indx,def,sec) 
    if not def then def = "None" end
    sec.CreateDropdown({Title = 'Select Field '..indx, List = GetListField("None"), Search = true,Default=def}, function(v)
        if not v then
            return
        end
        PuffField[indx] = v
    end)
end

local Section22 = Page2.CreateSection('Puffroom Field Priority')
for k,v in pairs(PuffField) do 
    CreateBtnP(k,v,Section22)
end
Section22.CreateButton({Title = 'Add Field'}, function()
    CreateBtnP(#PuffField+1,nil,Section22)
end)
local Section22 = Page2.CreateSection('Main')

Section22.CreateToggle({Title = 'Auto Farm Puffroom', Desc = "Auto Farm Puffroom (Auto Farm must been enabled)", Default = Settings.Pushroom}, function(v)
    Settings.Pushroom = v
end)


local Page1 = Main.CreatePage({Page_Name = 'Planter', Page_Title = 'Planter'})

local ListPlanter = {}
for k,v in pairs(game:GetService("ReplicatedStorage").LocalPlanters["Planter Pots"]:GetChildren()) do 
    table.insert(ListPlanter,v.Name)
end

local ListPlanterDo = {}
if Settings.ListPlanterDo then ListPlanterDo = Settings.ListPlanterDo else Settings.ListPlanterDo = ListPlanterDo end
for i=1,3 do 
    local rac = ListPlanterDo[i]
    local info = ListPlanterDo[i] or {Name="",ListField={},Toggle=false,IgnoreSmoke=false}
    local Section13 = Page1.CreateSection('Planter '..i)
    Section13.CreateDropdown({Title = 'Select Planter', List = ListPlanter, Search = true,Default=info.Name}, function(v)
        if not v then
            return
        end
        info.Name=v
    end)
    local ia = 1
    local function createField(v) 
        print(v)
        local currindex=ia
        Section13.CreateDropdown({Title = 'Select Field '..ia, List = GetListField("None"), Search = true,Default=v or "None"}, function(v)
            if not v then
                return
            end
            info.ListField[currindex]=v
        end)
        ia=ia+1
    end
    
    Section13.CreateButton({Title = 'Add More Field'}, function()
        createField()
    end)
    info.CurrL = Section13.CreateLabel({Title = "Current Field: "})

    Section13.CreateToggle({Title = 'Auto Planter', Default = info.Toggle}, function(v)
        info.Toggle = v
    end)
    Section13.CreateToggle({Title = 'Ignore Planter When Smoking', Default = info.IgnoreSmoke}, function(v)
        info.IgnoreSmoke = v
    end)
    for k,v in pairs(info.ListField) do 
        createField(v)
    end
    if #info.ListField==0 then 
        createField()
    end
   
    if not rac then 
        table.insert(ListPlanterDo,info)
    end
end



function GetPlanterData(name) 
    local concaccon = require(game:GetService("ReplicatedStorage").LocalPlanters)
    local concacbo = concaccon.LoadPlanter
    local PlanterTable = debug.getupvalues(concacbo)[4]
    for k,v in pairs(PlanterTable) do 
        if v.PotModel and v.PotModel.Parent and tostring(v.PotModel)==name then 
            return v
        end
    end
end
function IsPlanterCompleted(name) 
    local planter = GetPlanterData(name)
    if Settings.IgnoreSmoke then
        if planter.Puffshroom then 
            return false
        end
    end
    if planter then 
        local s,e = pcall(function() 
            return planter.Gui.Bar.FillBar.Size==planter.Gui.Bar.Size
        end)
        if s then return e else return true end
    end
end
local FieldPL={}
SpawnTable["Planter"] = function() 
    while wait(1) do 
        for k,v in pairs(ListPlanterDo) do
            if not FieldPL[v] then 
                FieldPL[v] = 1 
            end
            if v.Toggle and v.Name~="" and v.ListField[FieldPL[v]] ~="" and v.Field~="None" and CheckFarm("Planter") then 
                local data = GetPlanterData(v.Name)
                if not data then
                    local Field = GetFieldByName(v.ListField[FieldPL[v]])
                    v.CurrL.SetText("Current Field: "..v.ListField[FieldPL[v]])
                    if Field then 
                        local t = tick()
                        repeat wait() 
                            if CheckFarm("Planter") then 
                                StopFarmList["Planter"]=true
                                tpT(Field.CFrame+Vector3.new(0,3,0))
                                wait(2)
                                if (Field.Position-plr.Character.HumanoidRootPart.Position).magnitude < 40 then  
                                    game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = v.Name}) 
                                end
                            end
                            
                        until GetPlanterData(v.Name) or tick()-t>3 or not v.Toggle or not CheckFarm("Planter")
                    end
                else
                    if IsPlanterCompleted(v.Name) then 
                        local pos = data.Pos
                        StopFarmList["Planter"]=true
                        tpT(CFrame.new(pos)*CFrame.new(0,3,0))
                        local t = tick()
                        game:GetService("ReplicatedStorage").Events.PlanterModelCollect:FireServer(data.ActorID)
                        repeat wait()
                         until not  GetPlanterData(v.Name) or tick()-t>3 or not CheckFarm("Planter") 
                        wait(3)
                        if CheckFarm("Planter") then
                            for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                                if IsToken(v)
                                and (v.Position-pos).magnitude<40 then
                                    if CheckFarm("Planter") then
                                        Walkk(
                                            CFrame.new(
                                                v.Position.X,
                                                plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                                v.Position.Z
                                            )
                                        )
                                    end
                                end
                            end
                        end
                        FieldPL[v]=FieldPL[v]+1
                        if FieldPL[v]>#v.ListField then 
                            FieldPL[v]=1
                        end
                    end
                end
            end
        end
        StopFarmList["Planter"]=false
    end
end


local Page3 = Main.CreatePage({Page_Name = 'Auto Kill', Page_Title = 'Auto Kill Tab'})
local Section31 = Page3.CreateSection('Auto Kill Mobs')
Section31.CreateToggle({Title = 'Auto Kill Mobs', Desc = 'Auto Kill all Mobs in the game when they spawned (not boss)', Default = Settings.AutoMob}, function(v)
    Settings.AutoMob = v
end)
Section31.CreateDropdown({Title = 'Mob List', List = TimerKiet, Selected = true}, function(k,v)
    if k and v then
        TimerKiet[k]=v
    end
end)
local Section33 = Page3.CreateSection('Auto Wild Bee')
Section33.CreateToggle({Title = 'Auto Kill Vicious Bee', Default = Settings.KillVici}, function(v)
    Settings.KillVici = v
end)
Section33.CreateSlider({Title = 'Min Vicious Level', Min = 1, Max = 20, Default = Settings.ViciousMin or 1}, function(v)
    if v then 
        Settings.ViciousMin = v
    end
end)
Section33.CreateSlider({Title = 'Max Vicious Level', Min = 1, Max = 20, Default = Settings.ViciousMax or 20}, function(v)
    if v then 
        Settings.ViciousMax = v
    end
end)
Section33.CreateButton({Title = 'Check Vicious Bee'}, function()
    if game.workspace.Particles:FindFirstChild("Vicious") or game.workspace.Particles:FindFirstChild("Gifted Vicious") then 
        Library.CreateNoti({
            Title = nil,
            Desc = 'Found Vicious Bee',
            ShowTime = 5,
        })
    else
        Library.CreateNoti({
            Title = nil,
            Desc = 'Not Found Vicious Bee',
            ShowTime = 5,
        })
    end
end)
Section33.CreateToggle({Title = 'Auto Kill Windy Bee', Default = Settings.KillWindy}, function(v)
    Settings.KillWindy = v
end)
Section33.CreateButton({Title = 'Check Windy Bee'}, function()
    if game.workspace.NPCBees:FindFirstChild("Windy") then 
        Library.CreateNoti({
            Title = nil,
            Desc = 'Found Windy Bee',
            ShowTime = 5,
        })
    else
        Library.CreateNoti({
            Title = nil,
            Desc = 'Not Found Windy Bee',
            ShowTime = 5,
        })
    end
end)
function HopServer()
	while Settings.HopServer do wait(2) 
        if (Settings.KillVici
        and not (game.workspace.Particles:FindFirstChild("Vicious") or game.workspace.Particles:FindFirstChild("Gifted Vicious")))
        or (Settings.KillWindy 
        and not game.workspace.NPCBees:FindFirstChild("Windy")) then 
            Hop()
        end
	end
end
Section33.CreateToggle({Title = 'Auto Hop Server', Desc = 'Will Auto Hop server if your server have no Vicious / Windy', Default = Settings.HopServer}, function(v)
    Settings.HopServer = v
    spawn(function()
        HopServer()
    end)
end)
local Section33 = Page3.CreateSection('Auto Kill Boss')
Section33.CreateToggle({Title = 'Auto Kill Coconut Crab', Default = Settings.KillCrab}, function(v)
    Settings.KillCrab = v
end)
Section33.CreateToggle({Title = 'Auto Kill Stump Snail', Default = Settings.Snail}, function(v)
    Settings.Snail = v
end)
Section33.CreateToggle({Title = 'Auto Kill King Beetle', Default = Settings.AutoKing}, function(v)
    Settings.AutoKing = v
end)
Section33.CreateToggle({Title = 'Auto Kill Tunnel Bear', Default = Settings.AutoTunnel}, function(v)
    Settings.AutoTunnel = v
end)
Section33.CreateToggle({Title = 'Auto Kill Commando Chick', Default = Settings.AutoComando}, function(v)
    Settings.AutoComando = v
end)
Section33.CreateToggle({Title = 'Auto Kill Mondo Chick', Default = Settings.AutoMondo}, function(v)
    Settings.AutoMondo = v
end)
Section33.CreateToggle({Title = 'Auto Kill Snow Bear (Beemas)', Default = Settings.SnowBear}, function(v)
    Settings.SnowBear = v
end)
local Section34 = Page3.CreateSection('Auto Ant')
Section34.CreateToggle({Title = 'Auto Ant', Default = Settings.AutoFAnt}, function(v)
    Settings.AutoFAnt = v
end)
Section34.CreateToggle({Title = 'Auto Equip Sparkel Staff', Desc = "For gather flowers while floating", Default = Settings.AutoEquipSpark}, function(v)
    Settings.AutoEquipSpark = v
end)
local Section35 = Page3.CreateSection('Auto Stick Bug')
Section35.CreateToggle({Title = 'Auto Stick Bug', Desc = "Must enable with God Mode and Auto Farm)", Default = Settings.StickBug}, function(v)
    Settings.StickBug = v
end)
Section35.CreateToggle({Title = 'Auto Farm Totem', Default = Settings.FarmTotem}, function(v)
    Settings.FarmTotem = v
end)
function AutoStartStickBug()
    while Settings.AutoStartStickBug do 
        if Settings.StickBug then
            game.ReplicatedStorage.Events.SelectNPCOption:FireServer("StartFreeStickBugEvent")
        end
        wait(10)
    end
end
Section35.CreateToggle({Title = 'Auto Start Stick Bug', Desc = "Will auto start Free Stickbug, must enable with Auto Stick Bug", Default = Settings.AutoStartStickBug}, function(v)
    Settings.AutoStartStickBug = v
    spawn(function()
        AutoStartStickBug()
    end)
end)

function BeeTab() 
    local Page4 = Main.CreatePage({Page_Name = 'Bee', Page_Title = 'Bee Tab'})
    local Section41 = Page4.CreateSection('Settings')
    local x = 1
    local y=1
    Section41.CreateBox({Title = 'X', Placeholder = 'Type here', Number_Only = true}, function(v)
        if v then
            x = tonumber(v)
        end
    end)
    Section41.CreateBox({Title = 'Y', Placeholder = 'Type here', Number_Only = true}, function(v)
        if v then
            y = tonumber(v)
        end
    end)
    local Section41 = Page4.CreateSection('Auto Feed')
    local Item2Feed = "Treat"
    local FeedAmout = 1
    local AutoFeed = false
    Section41.CreateDropdown({Title = 'Select Item', List = {
        "Blueberry",
        "Strawberry",
        "Pineapple",
        "SunflowerSeed",
        "Bitterberry",
        "Neonberry",
        "MoonCharm",
        "AtomicTreat",
        "Treat"
    }}, function(v)
        if v then
            Item2Feed = tostring(v)
        end
    end)
    Section41.CreateBox({Title = 'Amount', Placeholder = 'Type here', Number_Only = true}, function(v)
        if not v then
            return
        end
        FeedAmout = tonumber(v)
    end)
    
    function AutoF()
        while AutoFeed and wait(.05) do 
            game.ReplicatedStorage.Events.ConstructHiveCellFromEgg:InvokeServer(x, y, Item2Feed, FeedAmout)
        end
    end
    Section41.CreateToggle({Title = 'Auto Feed', Default = false}, function(v)
        AutoFeed = v
        spawn(function()
            AutoF()
        end)
    end)
    Cache.JellyT = ""
    Section42 = Page4.CreateSection('Auto Gifted Basic Bee')
    Section42.CreateDropdown({Title = 'Select Jelly', List = listjelly}, function(v)
        if not v then
            return
        end
        Cache.JellyT = tostring(v)
    end)
    
    function AutoGB()
        while GiftBasic and wait() do 
            if not Cache.hive then 
                for k,v in pairs(game.Workspace.Honeycombs:GetChildren()) do 
                    if v.Owner.Value==plr then 
                        Cache.hive=v
                        break
                    end
                end
            end
            local HiveC = "C"..tostring(x)..","..tostring(y)
            if Cache.hive and hive.Cells:FindFirstChild(HiveC) then 
                if not (Cache.hive.Cells[HiveC].CellType.Value == "BasicBee"
                and Cache.hive.Cells[HiveC]:FindFirstChild("GiftedCell")) then
                    game.ReplicatedStorage.Events.ConstructHiveCellFromEgg:InvokeServer(x,y,Cache.JellyT,1)
                    game.ReplicatedStorage.Events.ConstructHiveCellFromEgg:InvokeServer(x,y,"Basic",1)
                end
            end
        end
    end
    Section42.CreateToggle({Title = 'Auto Gifted Basic', Desc = 'Require Basic Egg, will open Basic Egg until got Gifted Basic Bee', Default = false}, function(v)
        GiftBasic = v
        spawn(function()
            AutoGB()
        end)
    end)
    local StopGift = false
    Cache.AutoJelly = false
    
    local MethodList = {
       "Stop When Reach The Selected Bee",
       "Stop When Get Mythic Bee",
       "Stop When Get Legendary Bee",
       "Stop When Get Any Gifted Bee"
    }
    
    local MethodTF = ListToOb(MethodList, false)
    
    Section42 = Page4.CreateSection('Auto Royal Jelly')
    Section42.CreateDropdown({Title = 'Select Method', Selected = true, List = MethodTF}, function(v)
        if k and v then 
            MethodTF[k]=v
        end
    end)
    local function GetListBee() 
        local ret = {}
        local ad = require(game:GetService("ReplicatedStorage").BeeTypes)
        for k,v in pairs(ad:GetAllTypes()) do 
            if v.RarityColor ~= game:GetService("ReplicatedStorage").BeeTypes.ColorEvent.Value then 
                table.insert(ret,k.."Bee")   
            end
            
        end 
        return ret
    end
    local ListBee = GetListBee()
    local ListBeeTF = ListToOb(ListBee,false)
    Section42.CreateDropdown({Title = 'Select Bee', Selected = true, List = ListBeeTF}, function(v)
        if k and v then 
            ListBeeTF[k]=v
        end
    end)
    Section42.CreateToggle({Title = 'Only Stop When Bee is gifted', Desc = nil, Default = false}, function(v)
        StopGift = v
        -- spawn(function()
        --     AutoGB()
        -- end)
    end)
    local Mythic = {"VectorBee","TadpoleBee","SpicyBee","FuzzyBee","BuoyantBee"}
    local Legend = {"ShyBee","NinjaBee","MusicBee","LionBee","DiamondBee","DemonBee","CarpenterBee","BabyBee"}
    local Event = {"BearBee","CobaltBee","CrimsonBee","FestiveBee","GummyBee","PhotonBee","PuppyBee","TabbyBee","ViciousBee","WindyBee"}
    function AutoJL() 
        local Hive = game:GetService("Players").LocalPlayer.Honeycomb.Value
        while Cache.AutoJelly do wait() 
            if Hive then 
                local CurrCell = Hive.Cells:FindFirstChild("C"..x..","..y)
                if CurrCell then 
                    if not CurrCell.CellLocked.Value then 
                        local function CheckDK() 
                            local function CheckDKLayer1() 
                                if MethodTF[MethodList[1]] then 
                                    if ListBeeTF[CurrCell.CellType.Value] then 
                                        return true 
                                    end
                                end
                                local Backplate = CurrCell:FindFirstChild("Backplate")
                                if Backplate then 
                                    if MethodTF[MethodList[2]] then 
                                        if table.find(Mythic,CurrCell.CellType.Value) then 
                                            return true 
                                        end
                                    end
                                    if MethodTF[MethodList[3]] then 
                                        if table.find(Legend,CurrCell.CellType.Value) then 
                                            return true 
                                        end
                                    end
                                end
                                if MethodTF[MethodList[4]] then 
                                    if CurrCell:FindFirstChild("GiftedCell") then return true end
                                end
                            end
                            local a = CheckDKLayer1()
                            if StopGift then 
                                if CurrCell:FindFirstChild("GiftedCell") then 
                                    return a
                                else
                                    return false
                                end
                            end
                            return a
                        end
                        if not CheckDK() then 
                            repeat wait() 
                                game:GetService("ReplicatedStorage").Events.ConstructHiveCellFromEgg:InvokeServer(x,y,"RoyalJelly",1,false)
                            until CheckDK()
                            return
                        end
                    end
                end
            end
        end
    end
    Section42.CreateToggle({Title = 'Auto Jelly', Desc = 'Auto Roll Royal Jelly (Can Enable With Game Rj Settings)', Default = false}, function(v)
        Cache.AutoJelly = v
        spawn(function() 
            AutoJL()
        end)
    end)
end
BeeTab()
function LocalPlayerTAB() 
    local Page5 = Main.CreatePage({Page_Name = 'Local Player', Page_Title = 'Local Player'})
    Section51 = Page5.CreateSection('Teleport')
    Section51.CreateDropdown({Title = 'TP Field', List = FieldList, Search = true}, function(v)
        if v then 
           plr.Character.HumanoidRootPart.CFrame = GetFieldByName(v).CFrame * CFrame.new(0, 5, 0)
        end
    end)
    local IgnoreNPCs = {
        "Bee Bear 4",
        "Bubble Bee Man 2",
        "Wind Shrine",
        "Ant Challenge Info"
    }
    local NPCs = {}
    for _, v in pairs(game.Workspace.NPCs:GetChildren()) do
        if v.Name == "Bee Bear 4" then
            NPCs["Bee Bear"] = v.Platform.Position
        end
        if v.Name == "Bubble Bee Man 2" then
            NPCs["Bubble Bee Man"] = v.Platform.Position
        end
        if not table.find(IgnoreNPCs, v.Name) then
            NPCs[v.Name] = v.Platform.Position
        end
    end
    local NPCList = {}
    for i, v in pairs(NPCs) do
        table.insert(NPCList, i)
    end
    Section51.CreateDropdown({Title = 'TP NPC', List = NPCList, Search = true}, function(v)
        if v then 
            local tvknpcpos = NPCs[v]
            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(tvknpcpos.X, tvknpcpos.Y + 5, tvknpcpos.Z)
        end
    end)
    local Shops = {
        ["Noob Shop"] = CFrame.new(74.056282043457, 3.8026716709137, 292.80020141602),
        ["Pro Shop"] = CFrame.new(164.4630279541, 68.288352966309, -151.47756958008),
        ["Blue HQ"] = CFrame.new(276.83996582031, 3.3883802890778, 96.945518493652),
        ["Red HQ"] = CFrame.new(-315.91201782227, 19.498743057251, 214.5513458252),
        ["Mountain Top Shop"] = CFrame.new(-19.324777603149, 175.28833007812, -159.74284362793),
        ["Ticket Tent"] = CFrame.new(-233.78407287598, 16.927011489868, 386.78750610352),
        ["Royal Jelly Shop"] = CFrame.new(-297.236328125, 51.501934051514, 67.355659484863),
        ["Basic Egg Shop"] = CFrame.new(-139.14775085449, 3.9883763790131, 243.48374938965),
        ["Ticket Shop"] = CFrame.new(-13.482753753662, 183.39573669434, -221.52685546875),
        ["Treat Shop"] = CFrame.new(-230.4030456543, 4.8152499198914, 89.569847106934),
        ["Gumdrop Shop"] = CFrame.new(66.302932739258, 20.67107963562, 26.903917312622),
        ["Petal Shop"] = CFrame.new(-499.71517944336, 50.858417510986, 454.16259765625),
        ["Coconut Cave"] = CFrame.new(-168.99224853516, 71.318328857422, 505.97467041016),
        ["Stinger Shop"] = CFrame.new(85.812812805176, 32.496761322021, 452.16723632812),
        ["Badge Bearer's Guild"] = CFrame.new(-416.93212890625, 68.129806518555, -30.169496536255),
        ["Gummy Bear's Lair"] = CFrame.new(273.13916015625, 25267.560546875, -778.31243896484),
        ["Magic Bean Shop"] = CFrame.new(350.51113891602, 91.242027282715, -83.949577331543),
        ["Dapper Bear’s Shop"] = CFrame.new(515.45446777344, 137.3191986084, -340.04870605469)
    }
    local ShopLists = {}
    for i, v in pairs(Shops) do
        table.insert(ShopLists, i)
    end
    Section51.CreateDropdown({Title = 'TP Shop', List = ShopLists, Search = true}, function(v)
        if v then 
            local tvknpcpos = Shops[v]
            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(tvknpcpos.X, tvknpcpos.Y + 5, tvknpcpos.Z)
        end
    end)
    
    local Summoner = {
        ["Honeystorm"] = CFrame.new(237.2932434082, 33.214778900146, 163.50535583496),
        ["Sprout"] = CFrame.new(-269.7864074707, 26.496240615845, 265.13418579102),
        ["Mythic Meteor"] = CFrame.new(161.01679992676, 125.4747467041, -163.02223205566),
    }
    local Summonerists = {}
    for i, v in pairs(Summoner) do
        table.insert(Summonerists, i)
    end
    Section51.CreateDropdown({Title = 'TP Summoner', List = Summonerists}, function(v)
        if v then 
            local tvknpcpos = Summoner[v]
            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(tvknpcpos.X, tvknpcpos.Y + 5, tvknpcpos.Z)
        end
    end)
    
    local ListIns = GetInstantList()
    Section51.CreateDropdown({Title = 'TP Instant Converter', List =  ObjListTostring(ListIns)}, function(v)
        if v then 
            for k, s in pairs(ListIns) do
                if s.Name == v then
                    plr.Character:WaitForChild("HumanoidRootPart").CFrame =
                    CFrame.new(s.Platform.Position.X, s.Platform.Position.Y + 3, s.Platform.Position.Z)
                end
            end
        end
    end)
    local ListMemo = GetMemoList()
    Section51.CreateDropdown({Title = 'TP Memory Match', List = ObjListTostring(ListMemo)}, function(v)
        if v then 
            for k, s in pairs(ListMemo) do
                if s.Name == v then
                    plr.Character:WaitForChild("HumanoidRootPart").CFrame =
                    CFrame.new(s.Platform.Position.X, s.Platform.Position.Y + 3, s.Platform.Position.Z)
                end
            end
        end
    end)
    Section51.CreateButton({Title = 'TP to Hive'}, function()
        local sp = plr.SpawnPos.Value.p
        local p = CFrame.new(sp.X, sp.Y, sp.Z)
        tpT(p, 100)
    end)
    Section52 = Page5.CreateSection('Mask')
    Section52.CreateDropdown({Title = 'Equip Mask', List = {
        "Gummy Mask",
        "Demon Mask",
        "Diamond Mask",
        "Honey Mask",
        "Bubble Mask",
        "Fire Mask"
    }}, function(v)
        if v then 
            game.ReplicatedStorage.Events.ItemPackageEvent:InvokeServer("Equip", {["Mute"] = false, ["Type"] = v, ["Category"] = "Accessory"})
        end
    end)
    function GetCurrentFieldMask()
        local nr = GetNerestFieldByObject(plr.Character:WaitForChild("HumanoidRootPart"))
        if getgenv().IsValidTokenPos(plr.Character:WaitForChild("HumanoidRootPart"), nr) then
            local Colour = MaskField2[tostring(nr)]
            local Mask = MaskF[Colour]
            return Mask
        end
    end
    function AutoEquipMask()
        while Settings.AutoEquipMask and wait(2) do 
            if Killing then
                game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Equip", {
                    ["Mute"] = true,
                    ["Type"] = AttackMask,
                    ["Category"] = "Accessory"
                })
            else
                game:GetService("ReplicatedStorage").Events.ItemPackageEvent:InvokeServer("Equip", {
                    ["Mute"] = true,
                    ["Type"] = GetCurrentFieldMask(),
                    ["Category"] = "Accessory"
                })
            end
        end
    end
    Section52.CreateToggle({Title = 'Auto Equip Masks', Default = Settings.AutoEquipMask}, function(v)
        Settings.AutoEquipMask = v
        spawn(function()
            AutoEquipMask()
        end)
    end)
    Section52.CreateDropdown({Title = 'White Mask', List = {"Gummy Mask", "Demon Mask", "Diamond Mask", "Honey Mask", "Bubble Mask", "Fire Mask"}, Search = true, Default =  MaskF["White"]}, function(v)
        if not v then
            return
        end
        MaskF["White"] = v
    end)
    Section52.CreateDropdown({Title = 'Red Mask', List ={"Gummy Mask", "Demon Mask", "Diamond Mask", "Honey Mask", "Bubble Mask", "Fire Mask"}, Search = true, Default = MaskF["Red"]}, function(v)
        if not v then
            return
        end
        MaskF["Red"] = v
    end)
    Section52.CreateDropdown({Title = 'Blue Mask', List = {"Gummy Mask", "Demon Mask", "Diamond Mask", "Honey Mask", "Bubble Mask", "Fire Mask"}, Search = true, Default = MaskF["Blue"]}, function(v)
        if not v then return end
        MaskF["Blue"] = v
    end)
    Section52.CreateDropdown({Title = 'Attack Mask', List = {"Demon Mask", "Fire Mask"}, Search = true, Default = Settings.AttackMask}, function(v)
        if not v then return end
        Settings.AttackMask = v
    end)
    Section53 = Page5.CreateSection('Humanoid Modify')
    function WalkSpeed()
        while Settings.WalkSpeed and wait() do 
            if plr.Character:FindFirstChild("Humanoid") then
                plr.Character.Humanoid.WalkSpeed = Settings.SpeedTy
            end
        end
    end
    Section53.CreateToggle({Title = 'Change Walk Speed', Default = Settings.WalkSpeed}, function(v)
        Settings.WalkSpeed = v
        spawn(function() 
            WalkSpeed()
        end)
    end)
    Section53.CreateSlider({Title = 'WalkSpeed', Min = 50, Max = 400, Default = Settings.SpeedTy or 50}, function(v)
        if v then 
            Settings.SpeedTy = v
        end
    end)
    function JumpPower()
        while Settings.JumpPower and wait(2) do 
            if plr.Character:FindFirstChild("Humanoid") then
                plr.Character.Humanoid.JumpPower = Settings.JumpTy
            end
        end
    end
    Section53.CreateToggle({Title = 'Change Jump Power', Default = Settings.JumpPower}, function(v)
        Settings.JumpPower=v
        spawn(function() 
            JumpPower()
        end)
    end)
    Section53.CreateSlider({Title = 'JumpPower', Min = 50, Max = 400, Default = Settings.JumpTy or 70}, function(v)
        if v then 
            Settings.JumpTy = v
        end
    end)
    function Invisible()
        while Settings.Invisible and wait(2) do 
            if plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("LowerTorso") then
                local old = plr.Character.HumanoidRootPart.CFrame
                plr.Character.HumanoidRootPart.CFrame = CFrame.new(0, -1600, 0)
                local Toroso = plr.Character.LowerTorso
                Toroso:Destroy()
                plr.Character.HumanoidRootPart.CFrame = old
            end
        end
    end
    Section53.CreateToggle({Title = 'Invisible', Default = Settings.Invisible}, function(v)
        if v == nil then return end
        Settings.Invisible = v
        if v then
            spawn(function()
                Invisible()
            end)
        else 
            if not plr.Character:FindFirstChild("LowerTorso") then 
                plr.Character.Humanoid.Health = 0
    
            end
        end
    end)
    Section53.CreateToggle({Title = 'God Mode', Default = Settings.GodMode}, function(v)
        if v == nil then return end
        Settings.GodMode = v
        if v then
            God()
        else
            UnGod()
        end
    end)
    Section54 = Page5.CreateSection('Glider Modify')
    Section54.CreateToggle({Title = 'Change Glider', Default = Settings.ChangeGlider}, function(v)
        Settings.ChangeGlider = v
    end)
    Section54.CreateDropdown({Title = 'Select Glider', List = {"Parachute", "Glider", "DebugGlider"}, Default = Settings.Glider}, function(v)
        Settings.Glider = v
    end)
end
LocalPlayerTAB()
Page6 = Main.CreatePage({Page_Name = 'Webhook', Page_Title = 'Webhook Settings Tab'})
Section61 = Page6.CreateSection('Webhook')
Section61.CreateBox({Title = 'Webhook Url', Placeholder = 'Type here', Number_Only = false, Default = Settings.WebHookUrl}, function(v)
    if not v then
        return
    end
    Settings.WebHookUrl = v
end)
Section61.CreateBox({Title = 'Webhook Timer', Placeholder = 'Put Timer here (min)', Number_Only = true, Default = Settings.WebHookTime}, function(v)
    if not v then
        return
    end
    Settings.WebHookTime = tonumber(v)
end)
Section61.CreateButton({Title = 'Test Web Hook'}, function()
    msg = {
		["embeds"] = {{
			["title"] = "Bee Swarm Simulator",
			["type"] = "rich",
			["color"] = tonumber(0xbdce44),
			["fields"] = {
				{
					["name"] = "Test webhook",
					["value"] = "tvk1308 was here :eyes:",
					["inline"] = false
				},
			},
			["footer"] = {
				["icon_url"] = "https://cdn.discordapp.com/attachments/832985237638086660/843786018892939284/turtle.png",
				["text"] = "Sea Hub (" .. os.date("%X") .. ")"
			}
		}}
	}
    syn.request({
		Url = Settings.WebHookUrl,
		Method = "POST",
		Headers = {
			["Content-Type"] = "application/json"
		},
		Body = game:GetService("HttpService"):JSONEncode(msg)
	})
end)
function Webhook()
    while Settings.WebHook and wait() and Settings.WebHookTime do 
        --[[
        local s, e =
        pcall(function()
            SendHook()
        end)
        ]]
        SendHook()
        local tic = tick()
        repeat wait()
        until (tick() - tic) > Settings.WebHookTime * 60 or not Settings.WebHook
    end
end
Section61.CreateToggle({Title = 'Web Hook', Default = Settings.WebHook}, function(v)
    Settings.WebHook = v
    spawn(function()
        Webhook()
    end)
end)

Section61.CreateToggle({Title = 'Web Hook When Kicked/Disconected', Default = Settings.WebHookKick}, function(v)
    Settings.WebHookKick = v
end)
Section61.CreateToggle({Title = 'Web Hook When Quest Completed', Default = Settings.WebHookQuest}, function(v)
    Settings.WebHookQuest = v
end)
local a = require(game:GetService("ReplicatedStorage").Events)
local old
getgenv().Settings = Settings
old = hookfunction(a.ClientCall,function(...) 
    if getgenv().Settings.WebHookQuest then 
        local name,quest = ...
        if name == "CompleteQuest" or name == "CompleteQuestFromPool" then 
            spawn(function() 
                local bucac
                pcall(function() 
                    local quest = tostring(quest)
                    local StatCache = require(game.ReplicatedStorage.ClientStatCache)
                    local data = StatCache.Get()
                    bucac = data.Modifiers.MaxBeeEnergy._.Mods[1].Combo
                end)
                bucac=tostring(bucac)
                if quest=="Polar Bear" then 
                    SendHookCT({
                        {
                            name = "Name",
                            value = "||"..game.Players.LocalPlayer.Name.."||"
                        },
                        {
                            name = "Completed Quest",
                            value = quest
                        },
                        {
                            name = "Polar Power",
                            value = bucac
                        }
                    })
                else
                    SendHookCT({
                        {
                            name = "Name",
                            value = "||"..game.Players.LocalPlayer.Name.."||"
                        },
                        {
                            name = "Completed Quest",
                            value = quest
                        }
                    })
                end
                
            end)
        end
    end
    return old(...)
end)





Section62 = Page6.CreateSection('Webhook Settings')
Section62.CreateToggle({Title = 'Show Honey', Default = Settings.WHShowHoney}, function(v)
    Settings.WHShowHoney = v
end)
Section62.CreateDropdown({Title = 'Item Notification', List = TFItemHook, Search = true, Selected = true}, function(i,v)
    if i and v then 
        TFItemHook[i]=v
    end
end)
local SettingPage = Main.CreatePage({Page_Name = 'Setting', Page_Title = 'Setting Tab'})
AFSettingSection = SettingPage.CreateSection('Auto Farm Settings')
AFSettingSection.CreateDropdown({Title = 'Prioritize Token', List = PrioritizeListTF, Search = true, Selected = true}, function(k,v)
    if not k or not v then return end
    PrioritizeListTF[k]=v
end)
AFSettingSection.CreateToggle({Title = 'Shower Instant TP', Desc = 'Will instant TP to the shower instead of walk (Coconut, Beemas light)', Default = Settings.ShowerTP}, function(v)
    Settings.ShowerTP = v
end)
AFSettingSection.CreateToggle({Title = 'Instant TP when near Token', Default = Settings.NearTP}, function(v)
    Settings.NearTP = v
end)
AFSettingSection.CreateSlider({Title = 'Instant TP Distance', Min = 5, Max = 10, Default = Settings.NearTPMag}, function(v)
    if not v then return end
    Settings.NearTPMag = v
end)
AFSettingSection.CreateDropdown({Title = 'Select Movement Method', List = {"Tween", "Walk"}, Default = Settings.MovementMethod or "Walk"}, function(v)
    if v then 
        Settings.MovementMethod = v
    end
end)
AFSettingSection.CreateSlider({Title = '(Movement Method) Tween Speed', Min = 50, Max = 100, Default = Settings.TweenSpeed or 70}, function(v)
    if not v then return end
    Settings.TweenSpeed = v
end)

local ScriptSettingSection = SettingPage.CreateSection('Script Setting')
function AutoSave()
    while Settings.AutoSave and wait() do 
        SaveSettings()
        wait(5)
    end
end
ScriptSettingSection.CreateToggle({Title = 'Auto Save', Default = Settings.AutoSave}, function(v)
    Settings.AutoSave = v
    if v then
        spawn(function()
            AutoSave()
        end)
    else
        SaveSettings()
    end
end)
local GUISettingSection = SettingPage.CreateSection('GUI Settings')
HoneyGainedLabel = GUISettingSection.CreateLabel({Title = "Honey Gained: 0"})
spawn(function()
    while wait(5) do
        HoneyGainedLabel.SetText("Honey Gained: " .. formatNumber(getgenv().HoneyMade))
    end
end)
TimerLabel = GUISettingSection.CreateLabel({Title = "Timer"})
spawn(function()
	while wait(.25) do
		local PlayTime = game.workspace.DistributedGameTime
		local Sec = PlayTime % 60
		local Min = math.floor(PlayTime / 60 % 60)
		local Hour = math.floor(PlayTime / 3600)
		TimerLabel.SetText(string.format('Timer: %.0fh %.0fm %.0fs', Hour, Min, Sec))
	end
end)
getgenv().GuiToggled = true
GUISettingSection.CreateBind({Title = 'Toggle GUI', Key = Enum.KeyCode.RightControl}, function()
	getgenv().GuiToggled = not getgenv().GuiToggled
    if game.CoreGui:FindFirstChild("Sea Hub GUI")then for a,b in ipairs(game.CoreGui:GetChildren())do if b.Name=="Sea Hub GUI"then b.Enabled=getgenv().GuiToggled end end end
end)
if getgenv().Key == nil then
    GUISettingSection.CreateButton({Title = 'Destroy GUI'}, function()
	    if game.CoreGui:FindFirstChild("Sea Hub GUI")then for a,b in ipairs(game.CoreGui:GetChildren())do if b.Name=="Sea Hub GUI"then b:Destroy()end end end
    end)
end
-- UI LIB --
SpawnTable["Stickbug"] = function() 
    while wait(1) do
        if Settings.StickBug and CheckFarm("Stick") then 
            for k,v in pairs(game.Workspace.Monsters:GetChildren()) do 
                if string.match(v.Name,"Stick Bug") and CheckFarm("Stick") then 
                    if Settings.StickBug and v.Parent and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health>0 then 
                        StopFarmList["Stick"]=true
                        SetEN("Noclip", "Stick", true)
                        Killing=true
                       repeat wait()
                        if plr.Character:FindFirstChild("HumanoidRootPart") and v.Parent and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health>0 and CheckFarm("Stick") then 
                            local txt = plr.PlayerGui.ScreenGui.ChallengeInfo.SBChallengeInfo.TargetValue.Text
                            if Settings.FarmTotem and game.Workspace.Particles:FindFirstChild("StickBugTotem") then
                                SetEN("Noclip", "Stick", false)
                                wait(.1)
                                if game.Workspace.Particles:FindFirstChild("StickBugTotem") then 
                                    StopFarmList["Stick"]=false
                                    local nr = GetNerestFieldByObject(game.Workspace.Particles.StickBugTotem.Part)
                                    FarmFieldList["StickBug"] = nr
                                end
                            else
                                if v:FindFirstChild("Immune") and v.Immune.Value==true then
                                    StopFarmList["Stick"]=false
                                    SetEN("Noclip", "Stick", false)
                                    wait(.1)
                                    FarmFieldList["StickBug"] = GetFieldByText(txt)
                                else
                                    ValidTB["StickBug"]=true
                                    SetEN("Noclip", "Stick", true)
                                    local constick=v
                                    for k,v in pairs(game.Workspace.Collectibles:GetChildren()) do 
                                        local tf = Vector3.new(v.Position.X,0,v.Position.Z)
                                        local tf2 = Vector3.new(plr.Character.HumanoidRootPart.Position.X,0,plr.Character.HumanoidRootPart.Position.Z)
                                        if constick.Parent and getgenv().IsToken(v) and (tf-tf2).magnitude<20 and not getgenv().IsTokenBlacklist(v) then 
                                            plr.Character.HumanoidRootPart.CFrame=v.CFrame
                                            wait(.2)
                                        end
                                    end
                                    SetEN("Noclip", "Stick", true)
                                    if v:FindFirstChild("HumanoidRootPart") then 
                                        plr.Character.HumanoidRootPart.CFrame=v.HumanoidRootPart.CFrame
                                    end
                                end
                            end
                            
                        end
                        until not (v.Parent and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health>0 and Settings.StickBug) or not  CheckFarm("Stick")
                        Killing=false
                        ValidTB["StickBug"] = false
                        StopFarmList["Stick"]=false
                        SetEN("Noclip", "Stick", false)                    
                    end
                end
            end
        end
        if Settings.StickBug and plr.PlayerGui.ScreenGui.ChallengeInfo.Visible==true then 
        else
            FarmFieldList["StickBug"] = FarmFieldList[LevelFarm[LevelFarmVK["StickBug"]-1]]
            StopFarmList["Stick"]=false
        end
    end
end

getfenv().Settings=Settings
function IsInArr(it, arr)
    for k, v in pairs(arr) do
        if v == it then
            return true
        end
    end
    return false
end
local Blacklist = {"Gummy Bear", "Ant Challenge Info", "Bubble Bee Man 2", "Stick Bug"}
game:GetService("RunService").Stepped:connect(function()
    if plr.PlayerGui.ScreenGui.NPC.Visible == true
    and Settings.AutoQuest
    then 
        plr.PlayerGui.Camera.Controllers.NPC.IncrementDialogue:Invoke()
    end
end)
spawn(function()
    while wait(2) do
        if Settings.AutoQuest and not Selling then
            for _, v in ipairs(game.Workspace.NPCs:GetChildren()) do
                if v:FindFirstChild("Platform") and v.Platform.AlertPos.AlertGui.ImageLabel.ImageTransparency == 0 and not IsInArr(v.Name, Blacklist) and CheckQuestReq(v.Name)
                and (function() 
                    if (Settings.IgnoreHoneyBee) then
                        if v.Name=="Honey Bee" then return false end
                    end
                    return true
                end)() then
                    if Settings.AutoQuest and not Selling then        
                        local cac = require(game.ReplicatedStorage.Activatables.NPCs)
                        cac.ButtonEffect(game.Players.LocalPlayer,game:GetService("Workspace").NPCs[v.Name])
                        repeat wait(.1)
                        until plr.PlayerGui.ScreenGui.NPC.Visible == false or not Settings.AutoQuest
                        wait(.1)
                    end
                end
            end
        end
    end
end)

SpawnTable["Sprout"] = function() 
    while wait(.2) do 
        if Settings.AutoSprout then
            local Sprout = IsSprout()
            if Sprout ~= nil then
                local Fieldname = GetNerestFieldByObject(Sprout)
                if  CheckFieldReq(Fieldname) then 
                    FarmFieldList["Sprout"] = Fieldname
                    while (wait(1) and Settings.AutoSprout) do
                        local t = IsSprout()
                        FarmFieldList["Sprout"] = Fieldname
                        if t ~= Sprout then 
                            break;
                        end
                    end
                    wait(20)
                end
                
            else
            end
        end
        FarmFieldList["Sprout"] = FarmFieldList[LevelFarm[LevelFarmVK["Sprout"]-1]] 
    end
end

SpawnTable["QuestColor"] = function() 
    while wait(.2) do 
        for k,v in pairs(QuestTF) do 
            local rac = k
            if v and Settings.AutoQ then 
                local QuestNPC = GetQuestNPC(k)
                if QuestNPC then 
                    local QuestTb = GetQuestTable(QuestNPC)
                    if QuestTb["Color"] then 
                        for k,v in pairs(QuestTb["Color"]) do
                            if not v.IsCompleted() then
                                FarmFieldList["QuestPollen"] = RedBlueWhite(GetCurrentAmountOfBee())[v.Color]
                                repeat wait(1)
                                    if v.Type=="Collect Goo" then 
                                        if Settings.DropGumGoo then 
                                            game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = "Gumdrops"})
                                        end
                                    end
                                until v.IsCompleted() or not Settings.AutoQ or not QuestTF[rac]
                            end
                        end
                    end
                    if QuestTb["Toy"] then 
                        for k,v in pairs(QuestTb["Toy"]) do 
                            if not v.IsCompleted() then 
                                game.ReplicatedStorage.Events.ToyEvent:FireServer(v.Toy)
                                wait(2)
                            end
                        end
                    end
                end
            end
        end
        FarmFieldList["QuestPollen"] = FarmFieldList[LevelFarm[LevelFarmVK["QuestPollen"]-1]] 
    end
end

SpawnTable["Quest Pollen"] = function() 
    while wait(.2) do 
        for k,v in pairs(QuestTF) do 
            local rac = k
            if v and Settings.AutoQ then 
                local QuestNPC = GetQuestNPC(k)
                if QuestNPC then 
                    local QuestTb = GetQuestTable(QuestNPC)
                    if QuestTb["Zone"] then 
                        for k,v in pairs(QuestTb["Zone"]) do 
                            if not v.IsCompleted() then 
                                FarmFieldList["QuestField"] = v.Zone
                                repeat wait(1)
                                if v.Type=="Collect Goo" then 
                                    if Settings.DropGumGoo then 
                                        game:GetService("ReplicatedStorage").Events.PlayerActivesCommand:FireServer({["Name"] = "Gumdrops"})
                                    end
                                end
                                until v.IsCompleted() or not Settings.AutoQ or not QuestTF[rac]
                            end
                            
                        end
                    end
                    
                end
            end
        end
        FarmFieldList["QuestField"] = FarmFieldList[LevelFarm[LevelFarmVK["QuestField"]-1]] 
    end
end
SpawnTable["QuestMob"] = function() 
    while wait(.2) do 
        if Settings.AutoMob and Settings.Farm and ValidFarm() then
            for k, v in pairs(TimerMob) do
                if TimerKiet[k] then
                    local mob = CheckMob(k)
                    
                    if mob then
                        NoSprink=true
                        FarmFieldList["QuestMob"] = GetNerestFieldByObject(mob.Part)
                        while wait(1) and Settings.AutoMob do
                            local t = tick()
                            if not mob.Status() then
                                break
                            end
                        end
                        if Settings.AutoMob then
                            wait(3)
                        end
                        NoSprink=false
                    end
                end
            end
            FarmFieldList["QuestMob"] = FarmFieldList[LevelFarm[LevelFarmVK["QuestMob"]-1]] 
        end

        for k,v in pairs(QuestTF) do 
            local rac = k
            if v and Settings.AutoQ then 
                local QuestNPC = GetQuestNPC(k)
                if QuestNPC then 
                    local QuestTb = GetQuestTable(QuestNPC)
                    if QuestTb["Kill"] then 
                        for k,v in pairs(QuestTb["Kill"]) do 
                            if not v.IsCompleted() then 
                                --print(v.MonsterType)
                                if v.MonsterType then 
                                    if not string.match(v.MonsterType,"Ant") then 
                                        local mob = CheckMob(v.MonsterType)
                                        if mob then
                                            local t = tick()
                                            NoSprink=true
                                            FarmFieldList["QuestMob"] = GetNerestFieldByObject(mob.Part) 
                                            repeat wait(1)
                                            until (v.IsCompleted() and not GetAntQuest(QuestTF)) or not Settings.AutoQ or not QuestTF[rac] or mob.Status()==false or tick()-t > 60
                                            if AutoQ and QuestTF[rac] then 
                                                wait(4)
                                            end
                                            NoSprink=false
                                        end
                                    else
                                        if GetCurrenItem("AntPass") > 0 then
                                            AutoFAnt2=true
                                            repeat wait() AutoFAnt2=true until v.IsCompleted() or not Settings.AutoQ or not QuestTF[rac] 
                                            AutoFAnt2=false
                                           end
                                    end
                                end
                                
                            end
                            
                        end
                    end
                    if QuestTb["Token"] then 
                        for k,v in pairs(QuestTb["Token"]) do 
                            if v.Tag then 
                                if string.match(v.Tag,"Rage") then 
                                    if Settings.RageSnail and CheckSnail() then 
                                        repeat wait() ccsnail=true until v.IsCompleted() or not Settings.AutoQ or not QuestTF[rac] or not Settings.RageSnail or not CheckSnail()
                                        ccsnail=false
                                    end
                                    if Settings.RageAnt then 
                                        if GetCurrenItem("AntPass") > 0 then
                                            AutoFAnt2=true
                                            repeat wait() AutoFAnt2=true until v.IsCompleted() or not Settings.AutoQ or not QuestTF[rac] or not Settings.RageAnt
                                            AutoFAnt2=false
                                           end
                                    end
                                end
                            end
                        end
                    end
                    if QuestTb["Use"] then 
                        for k,v in pairs(QuestTb["Use"]) do 
                            pcall(function()
                                if not v.IsCompleted() and (v.Item=="Blueberry" or v.Item=="Strawberry") then 
                                    local DoEvent = game.ReplicatedStorage.Events.ConstructHiveCellFromEgg
                                    local v91, v92, v93, v94, v95=  DoEvent:InvokeServer(1, 1, v.Item, 1)
                                    if v92 then
                                        u1:Set({ "Eggs", v.Item }, v91);
                                        u1:Set("DiscoveredBees", v94);
                                        u1:Set("Honeycomb", v93);
                                        u1:Set({ "Totals", "EggUses" }, v95);
                                    end;
                                end
                            end)

                        end
                    end           
                                     
                end
            end
        end

        FarmFieldList["QuestMob"] = FarmFieldList[LevelFarm[LevelFarmVK["QuestMob"]-1]] 
    end
end

SpawnTable["Guiding"] = function() 
    while wait(.2) do
        if Settings.AutoFarmGuiding then
            local rac = game.Workspace.Particles:FindFirstChild("Guiding Star")
            if rac then 
                local nrf = GetNerestFieldByObject(rac)
                if CheckFieldReq(nrf) then 
                    FarmFieldList["Guiding"]=nrf
                    repeat wait(1) until not rac.Parent or not Settings.AutoFarmGuiding
                end
            end
        end
        FarmFieldList["Guiding"] = FarmFieldList[LevelFarm[LevelFarmVK["Guiding"]-1]] 
       
    end
end
SpawnTable["FarmBoost"] = function() 
    while wait(.2) do
        if Settings.AutoFarmBoost then
            for k, v in pairs(GetCurrentFieldBoost()) do
                --Field = k
                FarmFieldList["FieldBoost"] = k
                repeat
                    wait(.1)
                    FarmFieldList["FieldBoost"] = k
                until IsBoostEnd(k) or not Settings.AutoFarmBoost
            end
        end
        FarmFieldList["FieldBoost"] = FarmFieldList[LevelFarm[LevelFarmVK["FieldBoost"]-1]] 
    end
end

SpawnTable["Ant"] = function() 
    while wait(.2) do 
        if (Settings.AutoFAnt or AutoFAnt2) and CheckFarm("Ant") then 
            if not game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value then 
                if GetCurrenItem("AntPass") > 0 then
                    StopFarmList["Ant"] = true
                    ValidAnt=false
                    tpT(CFrame.new(89.138473510742, 33.982414245605, 503.96978759766))
                    wait(.1)
                    UseAnt()
                    local k = tick()
                    repeat wait() until game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value ==true or tick()-k >5 or not (Settings.AutoFAnt or AutoFAnt2) or not CheckFarm("Ant")
                   -- wait(1)
                    if game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value ==true then
                        
                        local old = ""
                        repeat wait() until plr.Character:FindFirstChild("Humanoid")
                        wait(1)
                       -- if AntMethod=="Filing" then 
                            SetEN("Noclip", "Ant", true)
                            plr.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(92.6141205, 45.4476166, 547.385254, -1, -4.76778114e-05, 8.39982658e-06, -6.96244262e-09, 0.173648417, 0.98480773, -4.84120937e-05, 0.98480773, -0.173648417)
                            for _,v in pairs(plr.Character:GetChildren()) do 
                                if v:IsA("Tool") then 
                                    old=v.Name
                                end
                            end
                            if Settings.AutoEquipSpark then 
                                game.ReplicatedStorage.Events.ItemPackageEvent:InvokeServer("Equip",{["Mute"] = false,["Type"] = "Spark Staff",["Category"] = "Collector"})

                            end
                            game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
                                {["Name"] = "Sprinkler Builder"}
                            )
                        repeat wait()
                            if CheckFarm("Ant") then 
                                Killing=true
                                local validpos = GetValidAntPos()
                                local yup = 56
                                 local ydown =32
                                 local cac
                                 SetEN("Noclip", "Ant", true)
                                 if CheckNear(validpos,"Ant") then 
                                     cac=CFrame.new(validpos.X,yup,validpos.Z)
                                 else
                                     cac=CFrame.new(validpos.X,ydown,validpos.Z)
                                 end
                                 if plr.Character:FindFirstChild("HumanoidRootPart") then 
                                     tpT(cac, 100)
                                 end
                                 for k,token in pairs(game.Workspace.Collectibles:GetChildren()) do
                                     local v = token
                                     if v:FindFirstChild("FrontDecal") then
                                         if
                                             v.FrontDecal.Texture == "rbxassetid://1629547638"  or -- token link
                                                 v.FrontDecal.Texture == "rbxassetid://2319083910"  or -- stinger
                                                 v.FrontDecal.Texture == "rbxassetid://1442700745"  or -- rage
                                                 v.FrontDecal.Texture == "rbxassetid://1629649299"
                                          then
                                             if getgenv().IsValidTokenPos(token, "Ant Field") and getgenv().IsToken(token) and
                                             not getgenv().IsTokenBlacklist(token) and Settings.AutoFAnt and token and not CheckNear(token.CFrame,"Ant") then 
                                                 local passed = true
                                                 local ray = Ray.new(token.Position+Vector3.new(0,1,0), Vector3.new(0, -5, 0))
                                                 local t = workspace:FindPartOnRayWithIgnoreList(ray, {token})
                                                 if t and CheckPollenValid(t) then 
                                                     passed=false
                                                 end
                                                 if passed then
                                                     plr.Character:WaitForChild("HumanoidRootPart").CFrame = token.CFrame
                                                     wait(.2)
                                                 end
                                             end
                                         end
                                     end 
                                 end
                            end
                        until not game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value or not (Settings.AutoFAnt or AutoFAnt2) or not CheckFarm("Ant")
                        game.ReplicatedStorage.Events.ItemPackageEvent:InvokeServer("Equip",{["Mute"] = false,["Type"] = old,["Category"] = "Collector"})
                        Killing=false
                        SetEN("Noclip", "Ant", false)
                        ValidAnt=true
                    end
                   
                end
            end
        end
        StopFarmList["Ant"] = false
    end
end

SpawnTable["Snail"] = function() 
    while wait(2) do 
        if Settings.Snail or ccsnail then
            if CheckSnail() and CheckFarm("Snail") then
                while  (Settings.Snail or ccsnail) and CheckSnail() and CheckFarm("Snail") do
                    Killing = true
                    StopFarmList["Snail"] = true
                    local uTorso =
                        workspace:WaitForChild(plr.Name):WaitForChild(
                        "HumanoidRootPart"
                    )
                    tpT(CFrame.new(405, 72.7, -176), 100)
                    SetEN("Noclip", "Snail", true)
                    wait()
                end
                Killing = false
                local uTorso =
                    workspace:WaitForChild(plr.Name):WaitForChild("HumanoidRootPart")
                uTorso.CFrame = GetFieldByName("Stump Field").CFrame
                wait(.4)
                SetEN("Noclip", "Snail", false)
            end
        end
        StopFarmList["Snail"] = false
    end
end
SpawnTable["Mob"] = function() 
    while wait(1) do
        if Settings.KillVici and CheckFarm("Kill") then
            if game:GetService("Workspace").Particles.WTs:FindFirstChild("WaitingThorn") then 
                if CheckFarm("Kill") then 
                    local nr = GetNerestFieldByObject(game:GetService("Workspace").Particles.WTs:FindFirstChild("WaitingThorn"))
                    if CheckFieldReq(nr) then 
                        StopFarmList["Kill"] = true
                        tpT(game:GetService("Workspace").Particles.WTs.WaitingThorn.CFrame)
                        wait(.5)
                    end
                end
            else
                if CheckFarm("Kill") then
                    for k,v in pairs(game.Workspace.Monsters:GetChildren()) do 
                        if string.match(v.Name,"Vicious") then 
                            if v:FindFirstChild("Level") then 
                                if v.Level.Value>=Settings.ViciousMin and v.Level.Value<=Settings.ViciousMax then 
                                    if v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart") then 
                                        local vicous = v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart")
                                        local nrf = GetNerestFieldByObject(vicous.CFrame)
                                        if  CheckFieldReq(nrf) then 
                                            StopFarmList["Kill"] = true
                                            repeat wait() 
                                                if CheckFarm("Kill") then 
                                                    if v:FindFirstChild("Torso") or v:FindFirstChild("HumanoidRootPart") then 
                                                        Killing = true
                                                        SetEN("Noclip", "Kill", true)
                                                        tpT(vicous.CFrame* CFrame.new(0, -5, 5))
                                                        CollectAttackTokens()
                                                    end
                                                    
                                                end
                                            until not v.Parent or not Settings.KillVici
                                            Killing = false
                                        end
                                    end
                                    
                                end
                            end
                        end
                    end
                    SetEN("Noclip", "Kill", false)
                end
            end
            StopFarmList["Kill"] = false
        end
        if Settings.KillWindy then
            if game.Workspace.NPCBees:FindFirstChild("Windy") and CheckFarm("Kill") then
                local nr = GetNerestFieldByObject(game.Workspace.NPCBees:FindFirstChild("Windy"))
                if CheckFieldReq(nr) then 
                    if getgenv().IsValidTokenPos(game.Workspace.NPCBees:FindFirstChild("Windy"), nr) then
                        SetEN("Noclip", "Kill", true)
                        Valid = false
                        StopFarmList["Kill"] = true
                        tpT(game.Workspace.NPCBees.Windy.CFrame, 100)
                        SetEN("Noclip", "Kill", false)
                    end
                end
            end
            for i, v in pairs(game.Workspace.Monsters:GetChildren()) do
                if (string.find(v.Name, "Windy") or v.Name == "KillingWindyBee") and v:FindFirstChild("Torso") and Settings.KillWindy and CheckFarm("Kill") then
                    local nrf = GetNerestFieldByObject(v.Torso)
                    if CheckFieldReq(nrf) then 
                        v.Name = "KillingWindyBee"
                        Valid = false
                        Killing = true
                        repeat wait()
                            if v:FindFirstChild("Torso") then
                                SetEN("Noclip", "Kill", true)
                                StopFarmList["Kill"] = true
                                tpT(CFrame.new(v.Torso.Position.x, v.Torso.Position.y + 20, v.Torso.Position.z), 100)
                                CollectAttackTokens()
                            end
                        until not game.workspace.Monsters:FindFirstChild("KillingWindyBee") or
                        Settings.KillWindy == false or not CheckFarm("Kill")
                        Killing = false
                        SetEN("Noclip", "Kill", false)
                        wait(5)                   
                        StopFarmList["Kill"] = false
                        if ValidFarm() and CheckFarm("Kill") then
                            local nre = GetNerestFieldByObject(plr.Character:WaitForChild("HumanoidRootPart"))
                            if getgenv().IsValidTokenPos(plr.Character:WaitForChild("HumanoidRootPart"), nre) then       
                                FarmFieldList["Mob"] = nre
                                wait(10)
                                FarmFieldList["Mob"] = FarmFieldList[LevelFarm[LevelFarmVK["Mob"]-1]] 
                            end
                        end
                    end
                end
            end
            for i, v in pairs(game.workspace.Monsters:GetChildren()) do
                if not string.find(v.Name, "Windy") and not game.workspace.NPCBees:FindFirstChild("Windy") then
                    Valid = true
                    NoSell = false
                end
            end
            Valid = true
            NoSell = false
        end
        if Settings.KillCrab then
            if CheckCoco() and CheckFarm("Kill") then
                StopFarmList["Kill"] = true
                tpT(CFrame.new(
                    -367.055786,
                    111.078384,
                    536.868652,
                    0.967295885,
                    -1.81630276e-06,
                    0.253650427,
                    -9.20609364e-06,
                    1,
                    4.22681369e-05,
                    -0.253650427,
                    -4.32209345e-05,
                    0.967295885
                ), 100)  
                wait(1.5)
                if Settings.KillCrab == true then
                    SetEN("Noclip", "Kill", true)
                    while CheckCoco() and wait() and Settings.KillCrab  and CheckFarm("Kill") do
                        StopFarmList["Kill"] = true
                        Killing = true

                        -- plr.Character:WaitForChild("HumanoidRootPart").CFrame =
                        --     CFrame.new(-261.811249, 115.952774, 503.228455, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                        SetEN("Noclip", "Kill", true)
                            tpT(CFrame.new(-261.811249, 115.952774, 503.228455, 1, 0, 0, 0, 1, 0, 0, 0, 1), 100)
                    end
                    Killing = false

                    SetEN("Noclip", "Kill", false)

                    if Settings.KillCrab  and Settings.Farm and CheckFarm("Kill") then
                        wait(5)
                        Valid = old
                        FarmFieldList["Mob"] = "Coconut Field"
                        for i = 1, 20 do
                            StopFarmList["Kill"] = false
                            wait(1)
                            FarmFieldList["Mob"] = "Coconut Field"
                            if not Settings.KillCrab  then
                                break
                            end
                        end
                        FarmFieldList["Mob"] = FarmFieldList[LevelFarm[LevelFarmVK["Mob"]-1]] 
                    end
                else
                    Valid = old
                end
            end
            Valid = true
        end

        
        
        ValidAnt=true
        
        
        if (Settings.AutoTunnel or AutoTunnel2) and CheckFarm("Kill") then
            local tunnel = CheckTunnel()
            if tunnel  then
                local old = Valid
                Valid = false
                StopFarmList["Kill"] = true
                tpT(CFrame.new(516.041992, 6.46273232, -46.5097466), 100)
                local k = tick()
                local target
                local st = true
                while wait() and CheckFarm("Kill") and tick() - k < 30 and (Settings.AutoTunnel or AutoTunnel2) and st do
                    if GetTunnel() then
                        break
                    end
                end
                wait(5)
                if (Settings.AutoTunnel or AutoTunnel2) and CheckFarm("Kill") then
                    local ticcc=tick()
                    repeat
                        Killing = true
                        StopFarmList["Kill"] = true
                        local tun = GetTunnel()
                        wait()
                        if tun and tun:FindFirstChild("HumanoidRootPart") then
                            SetEN("Noclip", "Kill", true)
                            plr.Character:WaitForChild("HumanoidRootPart").CFrame =
                                tun.HumanoidRootPart.CFrame + Vector3.new(0, 20, 0)
                        end
                    until not CheckTunnel() or not (Settings.AutoTunnel or AutoTunnel2) or tick() - ticcc > 60 or not CheckFarm("Kill")
                    Killing = false
                end
                SetEN("Noclip", "Kill", false)
            wait(2)
                if (Settings.AutoTunnel or AutoTunnel2) then
                    for i = 1, 3 do
                        for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                            if
                                (v.Position - plr.Character:WaitForChild("HumanoidRootPart").Position).magnitude <
                                    40 and CheckFarm("Kill")
                             then
                                Walkk(
                                    CFrame.new(
                                        v.Position.X,
                                        plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                        v.Position.Z
                                    )
                                )
                            end
                        end
                    end
                end
                Valid = old
            end
            Valid = true
        end
        if Settings.AutoMondo and CheckFarm("Kill") then
            for i, v in pairs(game.Workspace.Monsters:GetChildren()) do
                if string.find(v.Name, "Mondo Chick") then
                    v.Name = "KillingMondo Chick"
                    Valid = false
                    repeat
                        StopFarmList["Kill"] = true
                        Killing = true
                        wait()
                        SetEN("Noclip", "Kill", true)
                        if v:FindFirstChild("Head") then
                            tpT(CFrame.new(v.Head.Position.x + 25, 176.4, v.Head.Position.z + 25), 100)
                        end
                        CollectAttackTokens()
                    until not game.workspace.Monsters:FindFirstChild("KillingMondo Chick")
                    or not Settings.AutoMondo or not CheckFarm("Kill")
                    Killing = false
                    SetEN("Noclip", "Kill", false)
                    wait(1)
                    if Settings.Farm and Settings.AutoMondo and CheckFarm("Kill") then
                        StopFarmList["Kill"] = false
                        plr.Character:WaitForChild("HumanoidRootPart").CFrame =
                        GetFieldByName("Mountain Top Field").CFrame
                        NoSell=true
                        wait(.2)
                        Valid = true
                        FarmFieldList["Mob"] = "Mountain Top Field"
                        for i = 1, 20 do
                            FarmFieldList["Mob"] = "Mountain Top Field"
                            if not Settings.Farm or not Settings.AutoMondo then
                                break
                            end
                            wait(1)
                        end
                        FarmFieldList["Mob"] = FarmFieldList[LevelFarm[LevelFarmVK["Mob"]-1]] 
                        NoSell=false
                    end
                    Valid = true
                end
            end
        end
        if Settings.AutoComando and CheckFarm("Kill") then
            if CheckComando() then
                Valid = false
                local ToPos =
                    CFrame.new(
                    510.769714,
                    46.2348976,
                    164.753113,
                    0.510934234,
                    -4.59572291e-08,
                    -0.859619498,
                    2.90317903e-08,
                    1,
                    -3.62065649e-08,
                    0.859619498,
                    -6.45711751e-09,
                    0.510934234
                )
                repeat
                    StopFarmList["Kill"] = true
                    wait()
                    tpT(ToPos, 100)
                until GetComandoMob() or not CheckComando() or not Settings.AutoComando or not CheckFarm("Kill")
                wait(1)
                while wait() and CheckFarm("Kill") do
                    StopFarmList["Kill"] = true
                    Killing = true
                    if not CheckComando() or not Settings.AutoComando then
                        break
                    end
                    local comman = GetComandoMob()
                    if comman then
                        SetEN("Noclip", "Kill", true)
                        plr.Character:WaitForChild("HumanoidRootPart").CFrame = comman.HumanoidRootPart.CFrame + Vector3.new(0, 15, 0)
                        CollectAttackTokens(20)
                    else
                        plr.Character:WaitForChild("HumanoidRootPart").CFrame = ToPos
                    end
                end
                Killing = false
                SetEN("Noclip", "Kill", false)
                plr.Character:WaitForChild("HumanoidRootPart").CFrame = ToPos
                wait(3)
                for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                    if v.Name == "C" then
                        if v:FindFirstChild("FrontDecal") and CheckFarm("Kill") then
                            if
                                (v.Position - plr.Character:WaitForChild("HumanoidRootPart").CFrame.p).magnitude <=
                                    30
                             then
                                Walkk(
                                    CFrame.new(
                                        v.Position.X,
                                        plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                        v.Position.Z
                                    )
                                )
                            end
                        end
                    end
                end
                Valid = true
            end
        end
        if (Settings.AutoKing or AutoKing2) and CheckFarm("Kill")  then 
            if CheckKing() then
                Valid=false
                StopFarmList["Kill"] = true
                wait(.2)
                local KingSpawn = CFrame.new(167.829041, 6.20121384, 182.805527)
                --plr.Character:WaitForChild("HumanoidRootPart").CFrame = KingSpawn
                tpT( CFrame.new(167.829041, 6.20121384, 182.805527), 100)
                repeat wait() until GetKing() or not CheckFarm("Kill") or not Settings.AutoKing
                local King = GetKing()
                SetEN("Noclip", "Kill", true)
                repeat wait()
                    Killing = true
                    if King and King:FindFirstChild("Torso") then
                       plr.Character:WaitForChild("HumanoidRootPart").CFrame = King.Torso.CFrame*CFrame.new(0,20,0)
                    end
                until not GetKing() or not CheckKing() or not (Settings.AutoKing or AutoKing2) or not CheckFarm("Kill")
                Killing = false
                SetEN("Noclip", "Kill", false)
                wait(2)
                for i=1,3 do 
                    for k, v in pairs(game.Workspace.Collectibles:GetChildren()) do
                        if getgenv().IsToken(v) then
                            if v:FindFirstChild("FrontDecal") and CheckFarm("Kill") then
                                if
                                    (v.Position - plr.Character:WaitForChild("HumanoidRootPart").CFrame.p).magnitude <=
                                        30
                                 then
                                    Walkk(
                                        CFrame.new(
                                            v.Position.X,
                                            plr.Character:WaitForChild("HumanoidRootPart").Position.Y,
                                            v.Position.Z
                                        ),v
                                    )
                                end
                            end
                        end
                    end
                end
                Valid=true
            end
            
            
        end
        if (Settings.SnowBear) and CheckFarm("Kill") then 
            for k,v in pairs(game.Workspace.Monsters:GetChildren()) do 
                if string.match(v.Name:lower(),"snowbear") then 
                    if v:FindFirstChild("HumanoidRootPart") then 
                        repeat wait()
                            SetEN("Noclip", "Kill", true)
                            Killing = true
                            StopFarmList["Kill"] = true
                            ValidTB["Snowbear"] = true
                        if v:FindFirstChild("HumanoidRootPart") then 
                            tpT(v.HumanoidRootPart.CFrame*CFrame.new(5,-10,0), 100)
                        end
                        until not v.Parent or not v:FindFirstChild("HumanoidRootPart") or not v:FindFirstChild("Humanoid") or v.Humanoid.Health==0 or not Settings.SnowBear or not CheckFarm("Kill")
                        Killing = false
                        SetEN("Noclip", "Kill", false)
                        ValidTB["Snowbear"] = false
                    end
                end
            end
        end
        FarmFieldList["Mob"] = FarmFieldList[LevelFarm[LevelFarmVK["Mob"]-1]] 
        Valid=true
        StopFarmList["Kill"] = false
    end
end
function GetAttachedStation(station) 
    local HashTable = {}
    if not HashTable[station] then 
        HashTable[station]=true
    end
    local function Get(station) 
        for k,v in pairs(station:GetChildren()) do 
            if v.Name=="LinkBeam" then 
                local Attached = v.Attachment0.Parent.Parent.Parent
                if not HashTable[Attached] then 
                    HashTable[Attached]=true
                    Get(Attached)
                end
            end
        end
    end
    Get(station)
    return HashTable
end

SpawnTable["Mark"] = function() 
    while wait(1) and false do 
        -- game.Workspace.Stations.SignStation.LinkBeam
        local Stations = {}
        for k,v in pairs(game.Workspace.Stations:GetChildren()) do 
            -- table.insert(v,Stations)
            --print(CountTab(GetAttachedStation(v)))
        end

        -- local mark
        -- local Curr = FarmFieldList[LevelFarm[#LevelFarm]]
        -- local Field = GetFieldByName(Curr)
        
        -- for k,v in pairs(game.Workspace.Particles:GetChildren()) do 
        --     if  v.Name=="AreaRing" and Field and  v.Position.Y>Field.Position.Y and v:FindFirstChild("Decal") and v:FindFirstChild("Follow") and IsValidTokenPos(v,Curr) then 
        --         mark=v
        --         --break;
        --     end 
        -- end
        -- if mark then 
        --     FieldFarmPos[Curr] = {
        --         List = {mark.CFrame},
        --         Range = 15,
        --         WalkRd = 1
        --     }
        -- else
        --     print("CAcacsafa")
        --     FieldFarmPos[Curr] = nil
        -- end
    end
end
loadstring([[
     function getIntersection(part, ray)
        local whiteList = {part}
        return workspace:FindPartOnRayWithWhitelist(ray, whiteList)
    end
]])()
function GetFieldByFP(name) 
    local dit = name
    for k,v in pairs(GetListField()) do 
        local id = GetFieldId(v)
        if dit=="FP"..id then 
            return v
        end
    end
end

local StartC = tick()
local EndC=StartC
local fulled = false
spawn(function() 
    while wait(.2) do 
        local function Ret() 
            if Settings.FireFace then 
                local xa = GetNearestFire()
                if xa then 
                    local bm = plr.Character.UpperTorso:FindFirstChild(rnd) or Instance.new("BodyGyro",game.Players.LocalPlayer.Character.UpperTorso)
                    bm.Name=rnd
                    bm.CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character.UpperTorso.Position,xa.Position)
                    bm.MaxTorque = Vector3.new(0, math.huge, 0)
                    bm.D = tonumber(shared.D or 0)
                    bm.P = tonumber(shared.P or 5000)
                    return
                end
            end
            if Settings.TideFace then             
                local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
                local part = getIntersection(game.Workspace.Flowers,ray)
                if part then 
                    local curr,x,y = GetXY(part)
                    if curr and x and y then 
                        local CurrentField = GetFieldByFP(curr)
                        if CurrentField then 
                            local maxX = FieldXY[CurrentField].X
                            local maxY = FieldXY[CurrentField].Y
                            
                            local tb = {}
    
                            if plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("UpperTorso") then 
                                local a = GetFlower(curr,x,0)
                                table.insert(tb,a)
                                local a = GetFlower(curr,x,maxY)
                                table.insert(tb,a)
                                local a = GetFlower(curr,0,y)
                                table.insert(tb,a)
                                local a = GetFlower(curr,maxX,y)
                                table.insert(tb,a)
    
                                local xa
                                for k,v in pairs(tb) do 
                                    if not xa then xa = v end
                                    if (v.Position-plr.Character.HumanoidRootPart.Position).magnitude>(xa.Position-plr.Character.HumanoidRootPart.Position).magnitude then 
                                        xa=v
                                    end
                                end
                                if xa then
                                    local bm = plr.Character.UpperTorso:FindFirstChild(rnd) or Instance.new("BodyGyro",game.Players.LocalPlayer.Character.UpperTorso)
                                    bm.Name=rnd
                                    bm.CFrame = CFrame.lookAt(game.Players.LocalPlayer.Character.UpperTorso.Position,xa.Position)
                                    bm.MaxTorque = Vector3.new(0, math.huge, 0)
                                    bm.D = tonumber(shared.D or 0)
                                    bm.P = tonumber(shared.P or 5000)
                                    --  local cf = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                                    -- game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame=CFrame.lookAt(cf.Position,xa.Position)
                                    return
                                end
                            end
                        end
                    else
                    end
                else
                end
            else
            end
            if plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("UpperTorso") and plr.Character.UpperTorso:FindFirstChild(rnd) then 
                plr.Character.UpperTorso[rnd]:Destroy()
            end
        end
        Ret()
        
    end
end)
local f = nil
SpawnTable["Farm"] = function() 
    while true do 
        --local TempField = Field
        if ValidFarm() and Settings.Farm then
            if not plr.Character or not plr.Character:FindFirstChild("Humanoid") or not plr.Character:FindFirstChild("HumanoidRootPart") or plr.Character:FindFirstChild("Humanoid").Health==0 then 
                wait(8)
            end
            local TempField=FarmFieldList[LevelFarm[#LevelFarm]]
            local Character = plr.Character
            local HumanoidRootPart = GetHumanoidRootPart()
            if Settings.Farm and HumanoidRootPart then
                if not IsValidCharactPos(TempField) then
                    while TpToField(TempField,function() 
                        return TempField==FarmFieldList[LevelFarm[#LevelFarm]]
                        end) do 
                            TempField=FarmFieldList[LevelFarm[#LevelFarm]]
                        end
                    
                    wait(.2)
                     
                    if not NoSprink and Sprinklers[GetEquipSrinkler()] and Sprinklers[GetEquipSrinkler()] > 1 then
                        local old = plr.Character.HumanoidRootPart.CFrame
                        if CountSprink(GetEquipSrinkler(),GetFieldByName(TempField).Position) < Sprinklers[GetEquipSrinkler()] then 
                            for i = 1, Sprinklers[GetEquipSrinkler()] do
                                if plr.Character:FindFirstChild("Humanoid")
                                and plr.Character:FindFirstChild("HumanoidRootPart")
                                and Settings.Farm then
                                    tpT(old*CFrame.new(0,10,0), 100)
                                    SetEN("Noclip", "Sprinkler", true)
                                    --plr.Character:WaitForChild("Humanoid").Jump = true
                                    wait(.8)
                                    game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
                                        {["Name"] = "Sprinkler Builder"}
                                    )
                                    wait(1.5)
                                end
                            end
                            SetEN("Noclip", "Sprinkler", false)
                            tpT(old, 100)
                        end
                        
                    else
                        game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
                            {["Name"] = "Sprinkler Builder"}
                        )
                    end
                end
                local FieldPosIn = FieldFarmPos[TempField]
                if FieldPosIn then 
                    if #FieldPosIn["List"]>0 then 
                        if (plr.Character.HumanoidRootPart.Position-FieldPosIn.List[1].p).magnitude>FieldPosIn.Range then 
                            Walkk(FieldPosIn.List[1],nil,function() 
                                return (plr.Character.HumanoidRootPart.Position-FieldPosIn.List[1].p).magnitude>=FieldPosIn.Range
                            end)
                        end  
                    end
                end
                if Settings.AvoidMob then 
                    local function IsMob() 
                        for k,v in ipairs(game:GetService("Workspace").Monsters:GetChildren()) do 
                            if v:FindFirstChild("Head") and not string.match(v.Name,"Vici") and not string.match(v.Name,"Windy") and not string.match(v.Name,"Mondo") then 
                                if (plr.Character:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Target") and tostring(v.Target.Value)==plr.Name) or v:FindFirstChild("Tvk") then 
                                    if (plr.Character.HumanoidRootPart.Position-v.Head.Position).magnitude<25 then 
                                        if not v:FindFirstChild("Tvk") then 
                                            local rac = Instance.new("BoolValue",v)
                                            rac.Name="Tvk"
                                        end
                                        return true
                                    end
                                end
                            end
                        end
                    end
                    if plr.Character:FindFirstChild("Humanoid") then 
                        if IsMob() then 
                            DisableGlider()
                            local oldj
                            repeat wait()
                                if plr.Character:FindFirstChild("Humanoid") then
                                if not oldj then oldj = plr.Character.Humanoid.JumpPower end
                                plr.Character.Humanoid.JumpPower=80
                                plr.Character.Humanoid.Jump=true
                                end
                            until not IsMob() or not Settings.Farm or not ValidFarm() or not Settings.AvoidMob
                            if plr.Character:FindFirstChild("Humanoid") and olj then
                                plr.Character.Humanoid.JumpPower=oldj
                            end
                            wait(.1)
                            EnableGlider()
                            SetEN("Noclip", "Glider", false)
                        else
                            
                        end
                    end
                end
                if Settings.SmartTr then 
                    for k,v in pairs(ListTr) do 
                        if tick() < (v.Obj.Dur+v.Start+1) then 
                            repeat wait() 
                                -- if FieldPart[TempField] then 
                                --     local cc
                                --     for k,v2 in pairs(FieldPart[TempField]) do 
                                --        -- print(v2)
                                --         if not cc then cc=v2 end
                                --         if DienTichTamGiac(v.Obj.RootPos,v.Obj.Part2.Position,v2.Position)>DienTichTamGiac(v.Obj.RootPos,v.Obj.Part2.Position,cc.Position) then cc=v2 end
                                --     end
                                --     --print(cc)
                                --     if cc then 
                                --         tpT(CFrame.new(cc.Position.X,plr.Character.HumanoidRootPart.Position.Y,cc.Position.Z))
                                --     end
                                -- end
                                
                                local posa,posb,posc,posd
                                if TempField=="Stump Field" then 
                                     posa = Vector3.new(383.16137695312, 96.24715423584, -211.4790802002)
                                     posb = Vector3.new(390.18466186523, 96.247131347656, -135.6063079834)
                                     posc = Vector3.new(457.4714050293, 96.247131347656, -137.40628051758)
                                     posd = Vector3.new(457.81576538086, 96.247138977051, -215.57917785645)
                                else
                                    if GetFieldByName(TempField):FindFirstChild("ID") then 
                                        local FieldID = GetFieldByName(TempField).ID.Value
                                        posa = GetFlower("FP"..FieldID,0,0).Position
                                        posb = GetFlower("FP"..FieldID,FieldXY[TempField].X,0).Position
                                        posc = GetFlower("FP"..FieldID,FieldXY[TempField].X,FieldXY[TempField].Y).Position
                                        posd = GetFlower("FP"..FieldID,0,FieldXY[TempField].Y).Position
                                    end
                                    --print(posa,posb,posc,posd)
                                end
                                
                                local ListTd = {}

                                ListTd[1] = {pos=posa,DT=DienTichTamGiac(v.Obj.RootPos,v.Obj.Part2.Position,posa)}
                                ListTd[2] = {pos=posb,DT=DienTichTamGiac(v.Obj.RootPos,v.Obj.Part2.Position,posb)}
                                ListTd[3] = {pos=posc,DT=DienTichTamGiac(v.Obj.RootPos,v.Obj.Part2.Position,posc)}
                                ListTd[4] = {pos=posd,DT=DienTichTamGiac(v.Obj.RootPos,v.Obj.Part2.Position,posd)}
                                
                                local lonnhat
                                for k,v in pairs(ListTd) do 
                                    if not lonnhat then lonnhat = v end
                                    if v.DT > lonnhat.DT then lonnhat=v end
                                   -- print(v.DT)
                                end
                                tpT(CFrame.new(lonnhat.pos.X,plr.Character.HumanoidRootPart.Position.Y,lonnhat.pos.Z),nil,nil,nil,true)
                            until (tick() > (v.Obj.Dur+v.Start))
                            RemoveVal(ListTr,v)
                        end
                    end
                end
                if Settings.CollectLight then
                    local GetNuts = GetSortedCoconut(TempField,true)
                    while #GetNuts > 0 do 
                        for k,v in pairs(GetNuts) do 
                            if v:FindFirstChild("Mesh") and ValidFarm() and Settings.Farm then 
                                repeat wait()
                                    local vP = v.Position
                                    if Settings.ShowerTP then 
                                        plr.Character.HumanoidRootPart.CFrame = CFrame.new(vP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, vP.Z)
                                    else 
                                        Walkk(CFrame.new(vP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, vP.Z))
                                    end
                                until not v.Parent or not v:FindFirstChild("Mesh") or not Settings.Farm or not ValidFarm()
                            end
                        end
                        GetNuts = GetSortedCoconut(TempField,true)
                        wait()
                    end
                end
                if Settings.CollectCoco then
                    local GetNuts = GetSortedCoconut(TempField)
                    while #GetNuts > 0 do 
                        for k,v in pairs(GetNuts) do 
                            if v:FindFirstChild("Mesh") and ValidFarm() and Settings.Farm then 
                                repeat wait()
                                    local vP = v.Position
                                    if Settings.ShowerTP then 
                                        plr.Character.HumanoidRootPart.CFrame = CFrame.new(vP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, vP.Z)
                                    else 
                                        Walkk(CFrame.new(vP.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, vP.Z))
                                    end
                                until not v.Parent or not v:FindFirstChild("Mesh") or not Settings.Farm or not ValidFarm()
                            end
                        end
                        GetNuts = GetSortedCoconut(TempField)
                        wait()
                    end
                end
                if Settings.CollectBubble then
                    for k, v in ipairs(GetSortedBubble(TempField)) do
                        if v:IsA("Part") then
                            if v.Name == "Bubble" then
                                if getgenv().IsValidTokenPos(v, TempField,FieldPosIn) and ValidFarm() and Settings.Farm and Settings.CollectBubble then
                                    Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
                                end
                            end
                        end
                    end
                end
                if Settings.CrossHair then 
                    for k, v in pairs(GetSortedCrossHair(TempField)) do
                        if v:IsA("MeshPart") then
                            if getgenv().IsValidTokenPos(v, TempField) and ValidFarm() and Settings.Farm then
                                Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
                                local phantram = Settings.CrossHairStand or 0
                                --print(phantram)
                                if plr.CoreStats.Pollen.Value >= (plr.CoreStats.Capacity.Value*phantram)/100 then 
                                    --print("tvk")
                                    repeat wait() until not v.Parent or not Settings.CrossHair
                                end
                            end
                        end
                    end
                end
                if Settings.BubbleBloat and IsPopStar() then 
                    repeat wait()
                        for k, v in pairs(GetSortedBubble(TempField)) do
                            if v:IsA("Part") then
                                if v.Name == "Bubble" then
                                    if getgenv().IsValidTokenPos(v, TempField,FieldPosIn) and ValidFarm()  and Settings.Farm  then
                                        Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
                                    end
                                end
                            end
                        end
                    for _,v in pairs(game.Workspace.Collectibles:GetChildren()) do 
                        if  Settings.Farm and getgenv().IsToken(v) and getgenv().IsValidTokenPos(v,TempField) and v.FrontDecal.Texture==PrioritizeList["Summon Frog"] then
                            Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))                                       
                        end
                    end
                until not IsPopStar() or not Settings.BubbleBloat or not  Settings.Farm 
                end
                if Settings.GatherFlame then
                    for _, v in pairs(GetSortedFlame(TempField)) do
                        if v:IsA("Part") then
                            if v.Name == "FlamePart" then
                                if
                                    getgenv().IsValidTokenPos(v, TempField,FieldPosIn) and ValidFarm() and
                                        v:FindFirstChild("Fire")  and Settings.Farm 
                                 then
                                    v.Name = "Flame Cua Kiet"
                                    Walkk(CFrame.new(v.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, v.Position.Z))
                                    local t = tick()
                                    while wait() do
                                        if not Settings.Farm then 
                                            break
                                        end
                                        if not Settings.GatherFlame then
                                            break
                                        end
                                        if (tick() - t) > 10 then
                                            break
                                        end
                                        if game.Workspace.Particles:FindFirstChild("Flame Cua Kiet") then
                                        else
                                            break
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                
                local token = f or GetNerestToken(TempField,nil,ListAllToken,FieldPosIn)
                --print(token,FieldPosIn)
                if token then
                    if getgenv().IsValidTokenPos(token, TempField,FieldPosIn) and getgenv().IsToken(token) and not getgenv().IsTokenBlacklist(token) and Settings.Farm and ValidFarm() then
                        -- for k,v in pairs(game:GetService("Workspace").Cubs.Snow:GetChildren()) do 
                        --     pcall(function() 
                        --         v.CFrame = token.CFrame
                        --     end)    
                        -- end
                        Walkk(CFrame.new(token.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, token.Position.Z),token)
                        local Black = Instance.new("IntValue")
                        Black.Parent = token
                        Black.Name = "Blacklisted"
                        game.Debris:AddItem(Black,2)
                    else
                        wait()
                        f = nil
                    end
                else
                     if TempField ~= "Sea Hub Winning Field" and plr.Character:FindFirstChild("HumanoidRootPart") then 
                         if Settings.WalkToMark
                         and GetMark(TempField) then
                             local mark = GetMark(TempField)
                             if mark
                             and Settings.Farm then
                                if (plr.Character:FindFirstChild("HumanoidRootPart").Position - mark.Position).magnitude > mark.Size.X / 1.5 then  
                                    Walkk(CFrame.new(mark.Position.X, plr.Character:WaitForChild("HumanoidRootPart").Position.Y, mark.Position.Z))
                                else
                                    local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
                                    local part = getIntersection(game.Workspace.Flowers,ray)
                                    if part then 
                                        local curr,x,y = GetXY(part)
                                        if curr and x and y then 
                                            local n = (FieldPosIn and FieldPosIn.WalkRd) or 3
                                            local xnew = math.random(x-n,x+n)
                                            local ynew = math.random(y-n,y+n)
                                            local newflower = GetFlower(curr,xnew,ynew)
                                            if newflower then 
                                                if getgenv().IsValidTokenPos(newflower,TempField,FieldPosIn) then
                                                    Walkk(newflower.CFrame)
                                                end
                                            end
                                        
                                        end
                                    end
                                end
                             end
                            elseif Settings.WalkToBalloon and GetNearestBalloon(TempField) then
                                local nrs = GetNearestBalloon(TempField)
                                Walkk(nrs.BalloonRoot.CFrame)
                         else
                             local ray = Ray.new(plr.Character.HumanoidRootPart.Position,Vector3.new(0,-20,0))
                             local part = getIntersection(game.Workspace.Flowers,ray)
                             
                             if part then 
                                 local curr,x,y = GetXY(part)
                                 if curr and x and y then 
                                     local xnew = math.random(x-5,x+5)
                                     local ynew = math.random(y-5,y+5)
                                     local newflower = GetFlower(curr,xnew,ynew)
                                     if newflower then 
                                         if getgenv().IsValidTokenPos(newflower,TempField) then
                                             Walkk(newflower.CFrame)
                                         end
                                     end
                                 
                                 end
                             end
                         end
                     end
                     wait()
                end
                fulled=false
                if IsBackPackFull(Settings.ConvertAt) and ValidFarm() and not NoSell and not Settings.DisableConvert then
                    StartC=tick()      
                    if StartC-EndC>Settings.StayField then 
                        Selling=true
                        getfenv().Selling=Selling
                        if Settings.AutoMicro and GetCurrenMicro() > 0 then
                            game.ReplicatedStorage.Events.PlayerActivesCommand:FireServer(
                                {["Name"] = "Micro-Converter"}
                            )
                            wait(.5)
                        else
                            if Settings.AutoInstant and IsAnyInstantValid() and GetCurrenItem("Ticket") > 0 then
                                local Lis = GetInstantList()
                                for _, v in pairs(Lis) do
                                    if IsInstantValid(v.Name) then
                                        UseInstant(v.Name)
                                        wait(1)
                                        if IsBackPackFull(Settings.ConvertAt) then
                                            NormalSell()
                                        end
                                        break
                                    end
                                end
                            else
                                if Settings.AutoAntPass and GetCurrenItem("AntPass") > 0 and not game:GetService("Workspace").Toys["Ant Challenge"].Busy.Value then
                                    UseAnt()
                                    wait(.4)
                                    if IsBackPackFull(Settings.ConvertAt) then
                                        NormalSell()
                                    end
                                else
                                    NormalSell()
                                end
                            end
                        end
                        Selling=false
                        getfenv().Selling=Selling
                    end
                else
                    EndC=tick()
                end
           
            end
        else
            wait()
        end
    end
end

for k,v in pairs(SpawnTable) do 
    spawn(function() 
        xpcall(v,function(e) 
            local tb = {
                content = "Error",
                embeds = {
                    {
                        color = nil,
                        fields = {
                            {
                                name = "Error Mess",
                                value = e
                            },
                            {
                                name = "Exploit Used",
                                value = Exploit
                            },
                            {
                                name = "Error in",
                                value = k
                            }
                        },
                        author = {
                            name = "Sea Hub Bee Swarm Simulator Bug Reporter"
                        }
                    }
                }
            }
            print(e)
            print(debug.traceback())
            local a =
                syn.request(
                {
                    Url = "https://discord.com/api/webhooks/848166928446783489/ACsHIldjqsXk3TqmBX9AyrJOU6phGfX9F1cBN86P_QXjvHQ3CMcKYr5yuvRw4TvcAA_r",
                    Method = "POST",
                    Body = HttpService:JSONEncode(tb),
                    Headers = {
                        ["Content-Type"] = "application/json"
                    }
                }
            )
            
            print("Found bug. Reported to tvk1308.")
            
        end)
    end)
end
